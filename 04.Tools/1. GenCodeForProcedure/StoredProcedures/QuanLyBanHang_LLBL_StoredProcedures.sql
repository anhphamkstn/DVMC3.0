-- ================================================================================================================
-- Stored Procedures generated by LLBLGen v1.21.2003.712 Final on Monday, 15 August 2011, 1:46:27 PM
-- For the Low Level Business Logic Layer for the database 'QuanLyBanHang'
-- ================================================================================================================
SET NOCOUNT ON
GO
USE [QuanLyBanHang]
GO

-- ========================================================================================================
-- [Stored Procedures generated for table:  DM_CATEGORY]
GO

-- //// Insert Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DM_CATEGORY_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DM_CATEGORY_Insert]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will insert 1 row in the table 'DM_CATEGORY'
-- Gets: @CATEGORY_CODE nvarchar(50)
-- Gets: @CATEGORY_NAME nvarchar(250)
-- Gets: @CATEGORY_PARENT_ID numeric(18, 0)
-- Gets: @DISPLAY_ORDER numeric(4, 0)
-- Gets: @DISPLAY_LEVEL numeric(4, 0)
-- Gets: @CATEGORY_DESCRIPTION nvarchar(250)
-- Returns: @ID numeric(18, 0)
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DM_CATEGORY_Insert]
	@CATEGORY_CODE nvarchar(50),
	@CATEGORY_NAME nvarchar(250),
	@CATEGORY_PARENT_ID numeric(18, 0),
	@DISPLAY_ORDER numeric(4, 0),
	@DISPLAY_LEVEL numeric(4, 0),
	@CATEGORY_DESCRIPTION nvarchar(250),
	@ID numeric(18, 0) OUTPUT
AS
-- INSERT a new row in the table.
INSERT [dbo].[DM_CATEGORY]
(
	[CATEGORY_CODE],
	[CATEGORY_NAME],
	[CATEGORY_PARENT_ID],
	[DISPLAY_ORDER],
	[DISPLAY_LEVEL],
	[CATEGORY_DESCRIPTION]
)
VALUES
(
	@CATEGORY_CODE,
	@CATEGORY_NAME,
	@CATEGORY_PARENT_ID,
	@DISPLAY_ORDER,
	@DISPLAY_LEVEL,
	@CATEGORY_DESCRIPTION
)
-- Get the IDENTITY value for the row just inserted.
SELECT @ID=SCOPE_IDENTITY()
GO


-- //// Update Stored procedure for updating one single row.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DM_CATEGORY_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DM_CATEGORY_Update]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update an existing row in the table 'DM_CATEGORY'
-- Gets: @ID numeric(18, 0)
-- Gets: @CATEGORY_CODE nvarchar(50)
-- Gets: @CATEGORY_NAME nvarchar(250)
-- Gets: @CATEGORY_PARENT_ID numeric(18, 0)
-- Gets: @DISPLAY_ORDER numeric(4, 0)
-- Gets: @DISPLAY_LEVEL numeric(4, 0)
-- Gets: @CATEGORY_DESCRIPTION nvarchar(250)
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DM_CATEGORY_Update]
	@ID numeric(18, 0),
	@CATEGORY_CODE nvarchar(50),
	@CATEGORY_NAME nvarchar(250),
	@CATEGORY_PARENT_ID numeric(18, 0),
	@DISPLAY_ORDER numeric(4, 0),
	@DISPLAY_LEVEL numeric(4, 0),
	@CATEGORY_DESCRIPTION nvarchar(250)
AS
-- UPDATE an existing row in the table.
UPDATE [dbo].[DM_CATEGORY]
SET 
	[CATEGORY_CODE] = @CATEGORY_CODE,
	[CATEGORY_NAME] = @CATEGORY_NAME,
	[CATEGORY_PARENT_ID] = @CATEGORY_PARENT_ID,
	[DISPLAY_ORDER] = @DISPLAY_ORDER,
	[DISPLAY_LEVEL] = @DISPLAY_LEVEL,
	[CATEGORY_DESCRIPTION] = @CATEGORY_DESCRIPTION
WHERE
	[ID] = @ID
GO


-- //// Update Stored procedure for updating one or more rows using field [CATEGORY_PARENT_ID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DM_CATEGORY_UpdateAllWCATEGORY_PARENT_IDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DM_CATEGORY_UpdateAllWCATEGORY_PARENT_IDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will update one or more existing rows in the table 'DM_CATEGORY'.
-- Will reset field [CATEGORY_PARENT_ID] with value @CATEGORY_PARENT_IDOld  to value @CATEGORY_PARENT_ID
-- Gets: @CATEGORY_PARENT_ID numeric(18, 0)
-- Gets: @CATEGORY_PARENT_IDOld numeric(18, 0)
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DM_CATEGORY_UpdateAllWCATEGORY_PARENT_IDLogic]
	@CATEGORY_PARENT_ID numeric(18, 0),
	@CATEGORY_PARENT_IDOld numeric(18, 0)
AS
-- UPDATE an existing row in the table.
UPDATE [dbo].[DM_CATEGORY]
SET
	[CATEGORY_PARENT_ID] = @CATEGORY_PARENT_ID
WHERE
	[CATEGORY_PARENT_ID] = @CATEGORY_PARENT_IDOld
GO


-- //// Delete Stored procedure using Primary Key.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DM_CATEGORY_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DM_CATEGORY_Delete]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete an existing row from the table 'DM_CATEGORY'
-- using the Primary Key. 
-- Gets: @ID numeric(18, 0)
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DM_CATEGORY_Delete]
	@ID numeric(18, 0)
AS
-- DELETE an existing row from the table.
DELETE FROM [dbo].[DM_CATEGORY]
WHERE
	[ID] = @ID
GO


-- //// Delete Stored procedure, based on field [CATEGORY_PARENT_ID].
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DM_CATEGORY_DeleteAllWCATEGORY_PARENT_IDLogic]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DM_CATEGORY_DeleteAllWCATEGORY_PARENT_IDLogic]
GO

---------------------------------------------------------------------------------
-- Stored procedure that will delete one or more existing rows from the table 'DM_CATEGORY'
-- based on a foreign key field.
-- Gets: @CATEGORY_PARENT_ID numeric(18, 0)
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DM_CATEGORY_DeleteAllWCATEGORY_PARENT_IDLogic]
	@CATEGORY_PARENT_ID numeric(18, 0)
AS
-- DELETE one or more existing rows from the table.
DELETE
FROM [dbo].[DM_CATEGORY]
WHERE
	[CATEGORY_PARENT_ID] = @CATEGORY_PARENT_ID
GO


-- //// IsUpdatable Stored procedure.
-- //// Try-to-lock-and-compare Stored procedure.
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[pr_DM_CATEGORY_IsUpdatable]') and OBJECTPROPERTY(id, N'IsProcedure') = 1) drop procedure [dbo].[pr_DM_CATEGORY_IsUpdatable]
GO

---------------------------------------------------------------------------------
-- Stored procedure that try-to-lock-and-compare 1 row in the table 'DM_CATEGORY'
-- Gets: @CATEGORY_CODE nvarchar(50)
-- Gets: @CATEGORY_NAME nvarchar(250)
-- Gets: @CATEGORY_PARENT_ID numeric(18, 0)
-- Gets: @DISPLAY_ORDER numeric(4, 0)
-- Gets: @DISPLAY_LEVEL numeric(4, 0)
-- Gets: @CATEGORY_DESCRIPTION nvarchar(250)
-- Returns: @op_Error_Code int
---------------------------------------------------------------------------------
CREATE PROCEDURE [dbo].[pr_DM_CATEGORY_IsUpdatable]
	@CATEGORY_CODE nvarchar(50),
	@CATEGORY_NAME nvarchar(250),
	@CATEGORY_PARENT_ID numeric(18, 0),
	@DISPLAY_ORDER numeric(4, 0),
	@DISPLAY_LEVEL numeric(4, 0),
	@CATEGORY_DESCRIPTION nvarchar(250),
	@op_Error_Code int OUTPUT
/* DESCRIPTION:
|| Procedure nay dung de check 1 record trong bang cm_dm_tu_dien
|| 1. xem co lock duoc record nhu vay khong , 
||	a)thu lock neu khong lock duoc thi user khac dang lock 
||    b) neu khong co thi da bi xoa 
|| 2. xem co giong ban dau khong, neu khong giong thi da bi thay
*/
AS
BEGIN
/*********************************************
|| COMMON SETTINGS
**********************************************/
SET NOCOUNT ON
/**********************************************************
|| DECLARATION
***********************************************************/
	declare @v_CATEGORY_CODE nvarchar(50)
	declare @v_CATEGORY_NAME nvarchar(250)
	declare @v_CATEGORY_PARENT_ID numeric(18, 0)
	declare @v_DISPLAY_ORDER numeric(4, 0)
	declare @v_DISPLAY_LEVEL numeric(4, 0)
	declare @v_CATEGORY_DESCRIPTION nvarchar(250)
	 -- 1.a) neu khong lock duoc => ai do dang dung du lieu
	select 
	@v_CATEGORY_CODE = CATEGORY_CODE ,
	@v_CATEGORY_NAME = CATEGORY_NAME ,
	@v_CATEGORY_PARENT_ID = CATEGORY_PARENT_ID ,
	@v_DISPLAY_ORDER = DISPLAY_ORDER ,
	@v_DISPLAY_LEVEL = DISPLAY_LEVEL ,
	@v_CATEGORY_DESCRIPTION = CATEGORY_DESCRIPTION 
	 from DM_CATEGORY with (updlock, rowlock, nowait)
	 where ID =  @ID
	 -- 1.b) khong co du lieu  => du lieu da bi xoa mat roi 
	if ( @v_ID is null )
	begin
		set @OP_ERROR_CODE = dbo.C_RECORD_DELETED()
		raiserror ('RECORD_DELETED',16,1)
		goto ERROR_HANDLER
	end
	/*2. so sanh cac gia tri co giong  nhau khong */	
	 if (
	isnull( @v_CATEGORY_CODE,dbo.C_Extrem_Str() ) <> isnull( @CATEGORY_CODE ,dbo.C_Extrem_Str() )  OR 
	isnull( @v_CATEGORY_NAME,dbo.C_Extrem_Str() ) <> isnull( @CATEGORY_NAME ,dbo.C_Extrem_Str() )  OR 
	isnull( @v_CATEGORY_PARENT_ID,dbo.C_Extrem_Number() ) <> isnull( @CATEGORY_PARENT_ID ,dbo.C_Extrem_Number() )  OR 
	isnull( @v_DISPLAY_ORDER,dbo.C_Extrem_Number() ) <> isnull( @DISPLAY_ORDER ,dbo.C_Extrem_Number() )  OR 
	isnull( @v_DISPLAY_LEVEL,dbo.C_Extrem_Number() ) <> isnull( @DISPLAY_LEVEL ,dbo.C_Extrem_Number() )  OR 
	isnull( @v_CATEGORY_DESCRIPTION,dbo.C_Extrem_Str() ) <> isnull( @CATEGORY_DESCRIPTION ,dbo.C_Extrem_Str() ) 
	)
	begin
		set @OP_ERROR_CODE = dbo.C_RECORD_UPDATED()
		raiserror ('RECORD_CHANGED',16,1)
		goto ERROR_HANDLER
	end
		return
	/********************************************************* 
	|| ERROR HANDLING
	*********************************************************/
	ERROR_HANDLER:
END
GO


-- [End of Stored Procedures for table:     DM_CATEGORY]
-- ========================================================================================================
GO
