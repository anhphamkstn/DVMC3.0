///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the view 'V_GD_CAU_HINH_MAU_HD'
// Generated by LLBLGen v1.21.2003.712 Final on: Thursday, April 30, 2015, 22:19:36
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace TRMLLBL
{
	/// <summary>
	/// Purpose: Data Access class for the view 'V_GD_CAU_HINH_MAU_HD'.
	/// </summary>
	public class V_GD_CAU_HINH_MAU_HD : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDecimal		_iD_THONG_TIN_GV, _iD_MAU_HD, _iD;
			private SqlString		_tHONG_TIN_GV, _mA_THONG_TIN, _mA_CAU_HINH;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public V_GD_CAU_HINH_MAU_HD()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_MAU_HD</LI>
		///		 <LI>MA_CAU_HINH</LI>
		///		 <LI>ID_THONG_TIN_GV</LI>
		///		 <LI>MA_THONG_TIN. May be SqlString.Null</LI>
		///		 <LI>THONG_TIN_GV. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_V_GD_CAU_HINH_MAU_HD_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_MAU_HD", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_MAU_HD));
				cmdToExecute.Parameters.Add(new SqlParameter("@MA_CAU_HINH", SqlDbType.NVarChar, 35, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _mA_CAU_HINH));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_THONG_TIN_GV", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_THONG_TIN_GV));
				cmdToExecute.Parameters.Add(new SqlParameter("@MA_THONG_TIN", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _mA_THONG_TIN));
				cmdToExecute.Parameters.Add(new SqlParameter("@THONG_TIN_GV", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _tHONG_TIN_GV));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Output, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_iD = (Decimal)cmdToExecute.Parameters["@ID"].Value;
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("V_GD_CAU_HINH_MAU_HD::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a unique field. This method will Select one row from the database, based on the unique field 'ID'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		///		 <LI>ID</LI>
		///		 <LI>ID_MAU_HD</LI>
		///		 <LI>MA_CAU_HINH</LI>
		///		 <LI>ID_THONG_TIN_GV</LI>
		///		 <LI>MA_THONG_TIN</LI>
		///		 <LI>THONG_TIN_GV</LI>
		/// Will fill all properties corresponding with a field in the view with the value of the row selected.
		/// </remarks>
		public DataTable SelectOneWIDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_V_GD_CAU_HINH_MAU_HD_SelectOneWIDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("V_GD_CAU_HINH_MAU_HD");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				if(toReturn.Rows.Count > 0)
				{
					_iD = (Decimal)toReturn.Rows[0]["ID"];
					_iD_MAU_HD = (Decimal)toReturn.Rows[0]["ID_MAU_HD"];
					_mA_CAU_HINH = (string)toReturn.Rows[0]["MA_CAU_HINH"];
					_iD_THONG_TIN_GV = (Decimal)toReturn.Rows[0]["ID_THONG_TIN_GV"];
					_mA_THONG_TIN = toReturn.Rows[0]["MA_THONG_TIN"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["MA_THONG_TIN"];
					_tHONG_TIN_GV = toReturn.Rows[0]["THONG_TIN_GV"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["THONG_TIN_GV"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("V_GD_CAU_HINH_MAU_HD::SelectOneWIDLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlDecimal ID
		{
			get
			{
				return _iD;
			}
			set
			{
				SqlDecimal iDTmp = (SqlDecimal)value;
				if(iDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID", "ID can't be NULL");
				}
				_iD = value;
			}
		}


		public SqlDecimal ID_MAU_HD
		{
			get
			{
				return _iD_MAU_HD;
			}
			set
			{
				SqlDecimal iD_MAU_HDTmp = (SqlDecimal)value;
				if(iD_MAU_HDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_MAU_HD", "ID_MAU_HD can't be NULL");
				}
				_iD_MAU_HD = value;
			}
		}


		public SqlString MA_CAU_HINH
		{
			get
			{
				return _mA_CAU_HINH;
			}
			set
			{
				SqlString mA_CAU_HINHTmp = (SqlString)value;
				if(mA_CAU_HINHTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MA_CAU_HINH", "MA_CAU_HINH can't be NULL");
				}
				_mA_CAU_HINH = value;
			}
		}


		public SqlDecimal ID_THONG_TIN_GV
		{
			get
			{
				return _iD_THONG_TIN_GV;
			}
			set
			{
				SqlDecimal iD_THONG_TIN_GVTmp = (SqlDecimal)value;
				if(iD_THONG_TIN_GVTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_THONG_TIN_GV", "ID_THONG_TIN_GV can't be NULL");
				}
				_iD_THONG_TIN_GV = value;
			}
		}


		public SqlString MA_THONG_TIN
		{
			get
			{
				return _mA_THONG_TIN;
			}
			set
			{
				SqlString mA_THONG_TINTmp = (SqlString)value;
				if(mA_THONG_TINTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MA_THONG_TIN", "MA_THONG_TIN can't be NULL");
				}
				_mA_THONG_TIN = value;
			}
		}


		public SqlString THONG_TIN_GV
		{
			get
			{
				return _tHONG_TIN_GV;
			}
			set
			{
				SqlString tHONG_TIN_GVTmp = (SqlString)value;
				if(tHONG_TIN_GVTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("THONG_TIN_GV", "THONG_TIN_GV can't be NULL");
				}
				_tHONG_TIN_GV = value;
			}
		}
		#endregion
	}
}
