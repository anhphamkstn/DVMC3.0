///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'TEMP_THONG_TIN_COURSE'
// Generated by LLBLGen v1.21.2003.712 Final on: Thursday, May 07, 2015, 22:54:09
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace TRMLLBL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'TEMP_THONG_TIN_COURSE'.
	/// </summary>
	public class TEMP_THONG_TIN_COURSE : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		_nGAY_KET_THUC, _nGAY_BAT_DAU;
			private SqlDecimal		_sLHV, _sL_BAI_GIUA_KY, _iD_COURSE, _iD;
			private SqlString		_hO_TEN_GVHD, _eMAIL_GVCM, _hO_TEN_GVCM, _eMAIL_GCHD, _cOURSE_NAME;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public TEMP_THONG_TIN_COURSE()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_COURSE. May be SqlDecimal.Null</LI>
		///		 <LI>COURSE_NAME. May be SqlString.Null</LI>
		///		 <LI>NGAY_BAT_DAU. May be SqlDateTime.Null</LI>
		///		 <LI>NGAY_KET_THUC. May be SqlDateTime.Null</LI>
		///		 <LI>EMAIL_GVCM. May be SqlString.Null</LI>
		///		 <LI>EMAIL_GCHD. May be SqlString.Null</LI>
		///		 <LI>SLHV. May be SqlDecimal.Null</LI>
		///		 <LI>HO_TEN_GVCM. May be SqlString.Null</LI>
		///		 <LI>HO_TEN_GVHD. May be SqlString.Null</LI>
		///		 <LI>SL_BAI_GIUA_KY. May be SqlDecimal.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_TEMP_THONG_TIN_COURSE_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_COURSE", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_COURSE));
				cmdToExecute.Parameters.Add(new SqlParameter("@COURSE_NAME", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _cOURSE_NAME));
				cmdToExecute.Parameters.Add(new SqlParameter("@NGAY_BAT_DAU", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nGAY_BAT_DAU));
				cmdToExecute.Parameters.Add(new SqlParameter("@NGAY_KET_THUC", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nGAY_KET_THUC));
				cmdToExecute.Parameters.Add(new SqlParameter("@EMAIL_GVCM", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _eMAIL_GVCM));
				cmdToExecute.Parameters.Add(new SqlParameter("@EMAIL_GCHD", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _eMAIL_GCHD));
				cmdToExecute.Parameters.Add(new SqlParameter("@SLHV", SqlDbType.Decimal, 5, ParameterDirection.Input, false, 4, 1, "", DataRowVersion.Proposed, _sLHV));
				cmdToExecute.Parameters.Add(new SqlParameter("@HO_TEN_GVCM", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _hO_TEN_GVCM));
				cmdToExecute.Parameters.Add(new SqlParameter("@HO_TEN_GVHD", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _hO_TEN_GVHD));
				cmdToExecute.Parameters.Add(new SqlParameter("@SL_BAI_GIUA_KY", SqlDbType.Decimal, 5, ParameterDirection.Input, false, 4, 1, "", DataRowVersion.Proposed, _sL_BAI_GIUA_KY));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Output, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_iD = (Decimal)cmdToExecute.Parameters["@ID"].Value;
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TEMP_THONG_TIN_COURSE::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		///		 <LI>ID_COURSE. May be SqlDecimal.Null</LI>
		///		 <LI>COURSE_NAME. May be SqlString.Null</LI>
		///		 <LI>NGAY_BAT_DAU. May be SqlDateTime.Null</LI>
		///		 <LI>NGAY_KET_THUC. May be SqlDateTime.Null</LI>
		///		 <LI>EMAIL_GVCM. May be SqlString.Null</LI>
		///		 <LI>EMAIL_GCHD. May be SqlString.Null</LI>
		///		 <LI>SLHV. May be SqlDecimal.Null</LI>
		///		 <LI>HO_TEN_GVCM. May be SqlString.Null</LI>
		///		 <LI>HO_TEN_GVHD. May be SqlString.Null</LI>
		///		 <LI>SL_BAI_GIUA_KY. May be SqlDecimal.Null</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_TEMP_THONG_TIN_COURSE_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_COURSE", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_COURSE));
				cmdToExecute.Parameters.Add(new SqlParameter("@COURSE_NAME", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _cOURSE_NAME));
				cmdToExecute.Parameters.Add(new SqlParameter("@NGAY_BAT_DAU", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nGAY_BAT_DAU));
				cmdToExecute.Parameters.Add(new SqlParameter("@NGAY_KET_THUC", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nGAY_KET_THUC));
				cmdToExecute.Parameters.Add(new SqlParameter("@EMAIL_GVCM", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _eMAIL_GVCM));
				cmdToExecute.Parameters.Add(new SqlParameter("@EMAIL_GCHD", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _eMAIL_GCHD));
				cmdToExecute.Parameters.Add(new SqlParameter("@SLHV", SqlDbType.Decimal, 5, ParameterDirection.Input, false, 4, 1, "", DataRowVersion.Proposed, _sLHV));
				cmdToExecute.Parameters.Add(new SqlParameter("@HO_TEN_GVCM", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _hO_TEN_GVCM));
				cmdToExecute.Parameters.Add(new SqlParameter("@HO_TEN_GVHD", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _hO_TEN_GVHD));
				cmdToExecute.Parameters.Add(new SqlParameter("@SL_BAI_GIUA_KY", SqlDbType.Decimal, 5, ParameterDirection.Input, false, 4, 1, "", DataRowVersion.Proposed, _sL_BAI_GIUA_KY));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TEMP_THONG_TIN_COURSE::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_TEMP_THONG_TIN_COURSE_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TEMP_THONG_TIN_COURSE::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlDecimal ID
		{
			get
			{
				return _iD;
			}
			set
			{
				SqlDecimal iDTmp = (SqlDecimal)value;
				if(iDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID", "ID can't be NULL");
				}
				_iD = value;
			}
		}


		public SqlDecimal ID_COURSE
		{
			get
			{
				return _iD_COURSE;
			}
			set
			{
				SqlDecimal iD_COURSETmp = (SqlDecimal)value;
				if(iD_COURSETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_COURSE", "ID_COURSE can't be NULL");
				}
				_iD_COURSE = value;
			}
		}


		public SqlString COURSE_NAME
		{
			get
			{
				return _cOURSE_NAME;
			}
			set
			{
				SqlString cOURSE_NAMETmp = (SqlString)value;
				if(cOURSE_NAMETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("COURSE_NAME", "COURSE_NAME can't be NULL");
				}
				_cOURSE_NAME = value;
			}
		}


		public SqlDateTime NGAY_BAT_DAU
		{
			get
			{
				return _nGAY_BAT_DAU;
			}
			set
			{
				SqlDateTime nGAY_BAT_DAUTmp = (SqlDateTime)value;
				if(nGAY_BAT_DAUTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NGAY_BAT_DAU", "NGAY_BAT_DAU can't be NULL");
				}
				_nGAY_BAT_DAU = value;
			}
		}


		public SqlDateTime NGAY_KET_THUC
		{
			get
			{
				return _nGAY_KET_THUC;
			}
			set
			{
				SqlDateTime nGAY_KET_THUCTmp = (SqlDateTime)value;
				if(nGAY_KET_THUCTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NGAY_KET_THUC", "NGAY_KET_THUC can't be NULL");
				}
				_nGAY_KET_THUC = value;
			}
		}


		public SqlString EMAIL_GVCM
		{
			get
			{
				return _eMAIL_GVCM;
			}
			set
			{
				SqlString eMAIL_GVCMTmp = (SqlString)value;
				if(eMAIL_GVCMTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("EMAIL_GVCM", "EMAIL_GVCM can't be NULL");
				}
				_eMAIL_GVCM = value;
			}
		}


		public SqlString EMAIL_GCHD
		{
			get
			{
				return _eMAIL_GCHD;
			}
			set
			{
				SqlString eMAIL_GCHDTmp = (SqlString)value;
				if(eMAIL_GCHDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("EMAIL_GCHD", "EMAIL_GCHD can't be NULL");
				}
				_eMAIL_GCHD = value;
			}
		}


		public SqlDecimal SLHV
		{
			get
			{
				return _sLHV;
			}
			set
			{
				SqlDecimal sLHVTmp = (SqlDecimal)value;
				if(sLHVTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("SLHV", "SLHV can't be NULL");
				}
				_sLHV = value;
			}
		}


		public SqlString HO_TEN_GVCM
		{
			get
			{
				return _hO_TEN_GVCM;
			}
			set
			{
				SqlString hO_TEN_GVCMTmp = (SqlString)value;
				if(hO_TEN_GVCMTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("HO_TEN_GVCM", "HO_TEN_GVCM can't be NULL");
				}
				_hO_TEN_GVCM = value;
			}
		}


		public SqlString HO_TEN_GVHD
		{
			get
			{
				return _hO_TEN_GVHD;
			}
			set
			{
				SqlString hO_TEN_GVHDTmp = (SqlString)value;
				if(hO_TEN_GVHDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("HO_TEN_GVHD", "HO_TEN_GVHD can't be NULL");
				}
				_hO_TEN_GVHD = value;
			}
		}


		public SqlDecimal SL_BAI_GIUA_KY
		{
			get
			{
				return _sL_BAI_GIUA_KY;
			}
			set
			{
				SqlDecimal sL_BAI_GIUA_KYTmp = (SqlDecimal)value;
				if(sL_BAI_GIUA_KYTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("SL_BAI_GIUA_KY", "SL_BAI_GIUA_KY can't be NULL");
				}
				_sL_BAI_GIUA_KY = value;
			}
		}
		#endregion
	}
}
