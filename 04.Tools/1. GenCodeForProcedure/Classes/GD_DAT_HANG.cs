///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'GD_DAT_HANG'
// Generated by LLBLGen v1.21.2003.712 Final on: Sunday, May 17, 2015, 5:35:58 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace DVMCLLBL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'GD_DAT_HANG'.
	/// </summary>
	public class GD_DAT_HANG : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		_tHOI_GIAN_DAT_HANG, _tHOI_GIAN_TAO, _tHOI_GIAN_HOAN_THANH;
			private SqlDecimal		_iD_TRANG_THAI, _iD_TRANG_THAIOld, _iD_LOAI_THOI_GIAN_CAN_HOAN_THANH, _iD_LOAI_THOI_GIAN_CAN_HOAN_THANHOld, _iD_NGUOI_XU_LY, _iD_NGUOI_XU_LYOld, _iD_NGUOI_TAO, _iD_NGUOI_TAOOld, _iD_DANH_GIA_TU_USER_DAT_HANG, _iD_DANH_GIA_TU_USER_DAT_HANGOld, _iD_NGUOI_NHAN_DAT_HANG, _iD_NGUOI_NHAN_DAT_HANGOld, _iD_LOAI_DV_YEU_CAU, _iD_LOAI_DV_YEU_CAUOld, _iD_DON_VI, _iD_DON_VIOld, _iD;
			private SqlString		_nOI_DUNG_DAT_HANG, _uSER_NV_DAT_HANG, _mA_DON_HANG, _hO_TEN_USER_DAT_HANG, _pHAN_HOI_TU_DVMC, _y_KIEN_KHAC_TU_USER_DAT_HANG, _dIEN_THOAI;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public GD_DAT_HANG()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>MA_DON_HANG</LI>
		///		 <LI>USER_NV_DAT_HANG</LI>
		///		 <LI>ID_DON_VI</LI>
		///		 <LI>DIEN_THOAI. May be SqlString.Null</LI>
		///		 <LI>HO_TEN_USER_DAT_HANG. May be SqlString.Null</LI>
		///		 <LI>THOI_GIAN_DAT_HANG</LI>
		///		 <LI>ID_LOAI_DV_YEU_CAU</LI>
		///		 <LI>NOI_DUNG_DAT_HANG. May be SqlString.Null</LI>
		///		 <LI>ID_LOAI_THOI_GIAN_CAN_HOAN_THANH</LI>
		///		 <LI>PHAN_HOI_TU_DVMC. May be SqlString.Null</LI>
		///		 <LI>THOI_GIAN_HOAN_THANH. May be SqlDateTime.Null</LI>
		///		 <LI>ID_TRANG_THAI</LI>
		///		 <LI>ID_DANH_GIA_TU_USER_DAT_HANG. May be SqlDecimal.Null</LI>
		///		 <LI>Y_KIEN_KHAC_TU_USER_DAT_HANG</LI>
		///		 <LI>ID_NGUOI_NHAN_DAT_HANG</LI>
		///		 <LI>ID_NGUOI_XU_LY</LI>
		///		 <LI>THOI_GIAN_TAO</LI>
		///		 <LI>ID_NGUOI_TAO</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_DAT_HANG_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@MA_DON_HANG", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _mA_DON_HANG));
				cmdToExecute.Parameters.Add(new SqlParameter("@USER_NV_DAT_HANG", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _uSER_NV_DAT_HANG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DON_VI", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DON_VI));
				cmdToExecute.Parameters.Add(new SqlParameter("@DIEN_THOAI", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _dIEN_THOAI));
				cmdToExecute.Parameters.Add(new SqlParameter("@HO_TEN_USER_DAT_HANG", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _hO_TEN_USER_DAT_HANG));
				cmdToExecute.Parameters.Add(new SqlParameter("@THOI_GIAN_DAT_HANG", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _tHOI_GIAN_DAT_HANG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_LOAI_DV_YEU_CAU", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_LOAI_DV_YEU_CAU));
				cmdToExecute.Parameters.Add(new SqlParameter("@NOI_DUNG_DAT_HANG", SqlDbType.NVarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nOI_DUNG_DAT_HANG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_LOAI_THOI_GIAN_CAN_HOAN_THANH", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_LOAI_THOI_GIAN_CAN_HOAN_THANH));
				cmdToExecute.Parameters.Add(new SqlParameter("@PHAN_HOI_TU_DVMC", SqlDbType.NVarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _pHAN_HOI_TU_DVMC));
				cmdToExecute.Parameters.Add(new SqlParameter("@THOI_GIAN_HOAN_THANH", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _tHOI_GIAN_HOAN_THANH));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_TRANG_THAI", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_TRANG_THAI));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DANH_GIA_TU_USER_DAT_HANG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DANH_GIA_TU_USER_DAT_HANG));
				cmdToExecute.Parameters.Add(new SqlParameter("@Y_KIEN_KHAC_TU_USER_DAT_HANG", SqlDbType.NVarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _y_KIEN_KHAC_TU_USER_DAT_HANG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_NHAN_DAT_HANG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_NHAN_DAT_HANG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_XU_LY", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_XU_LY));
				cmdToExecute.Parameters.Add(new SqlParameter("@THOI_GIAN_TAO", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _tHOI_GIAN_TAO));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_TAO", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_TAO));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Output, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_iD = (Decimal)cmdToExecute.Parameters["@ID"].Value;
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_DAT_HANG::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		///		 <LI>MA_DON_HANG</LI>
		///		 <LI>USER_NV_DAT_HANG</LI>
		///		 <LI>ID_DON_VI</LI>
		///		 <LI>DIEN_THOAI. May be SqlString.Null</LI>
		///		 <LI>HO_TEN_USER_DAT_HANG. May be SqlString.Null</LI>
		///		 <LI>THOI_GIAN_DAT_HANG</LI>
		///		 <LI>ID_LOAI_DV_YEU_CAU</LI>
		///		 <LI>NOI_DUNG_DAT_HANG. May be SqlString.Null</LI>
		///		 <LI>ID_LOAI_THOI_GIAN_CAN_HOAN_THANH</LI>
		///		 <LI>PHAN_HOI_TU_DVMC. May be SqlString.Null</LI>
		///		 <LI>THOI_GIAN_HOAN_THANH. May be SqlDateTime.Null</LI>
		///		 <LI>ID_TRANG_THAI</LI>
		///		 <LI>ID_DANH_GIA_TU_USER_DAT_HANG. May be SqlDecimal.Null</LI>
		///		 <LI>Y_KIEN_KHAC_TU_USER_DAT_HANG</LI>
		///		 <LI>ID_NGUOI_NHAN_DAT_HANG</LI>
		///		 <LI>ID_NGUOI_XU_LY</LI>
		///		 <LI>THOI_GIAN_TAO</LI>
		///		 <LI>ID_NGUOI_TAO</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_DAT_HANG_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));
				cmdToExecute.Parameters.Add(new SqlParameter("@MA_DON_HANG", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _mA_DON_HANG));
				cmdToExecute.Parameters.Add(new SqlParameter("@USER_NV_DAT_HANG", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _uSER_NV_DAT_HANG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DON_VI", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DON_VI));
				cmdToExecute.Parameters.Add(new SqlParameter("@DIEN_THOAI", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _dIEN_THOAI));
				cmdToExecute.Parameters.Add(new SqlParameter("@HO_TEN_USER_DAT_HANG", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _hO_TEN_USER_DAT_HANG));
				cmdToExecute.Parameters.Add(new SqlParameter("@THOI_GIAN_DAT_HANG", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _tHOI_GIAN_DAT_HANG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_LOAI_DV_YEU_CAU", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_LOAI_DV_YEU_CAU));
				cmdToExecute.Parameters.Add(new SqlParameter("@NOI_DUNG_DAT_HANG", SqlDbType.NVarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nOI_DUNG_DAT_HANG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_LOAI_THOI_GIAN_CAN_HOAN_THANH", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_LOAI_THOI_GIAN_CAN_HOAN_THANH));
				cmdToExecute.Parameters.Add(new SqlParameter("@PHAN_HOI_TU_DVMC", SqlDbType.NVarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _pHAN_HOI_TU_DVMC));
				cmdToExecute.Parameters.Add(new SqlParameter("@THOI_GIAN_HOAN_THANH", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _tHOI_GIAN_HOAN_THANH));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_TRANG_THAI", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_TRANG_THAI));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DANH_GIA_TU_USER_DAT_HANG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DANH_GIA_TU_USER_DAT_HANG));
				cmdToExecute.Parameters.Add(new SqlParameter("@Y_KIEN_KHAC_TU_USER_DAT_HANG", SqlDbType.NVarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _y_KIEN_KHAC_TU_USER_DAT_HANG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_NHAN_DAT_HANG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_NHAN_DAT_HANG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_XU_LY", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_XU_LY));
				cmdToExecute.Parameters.Add(new SqlParameter("@THOI_GIAN_TAO", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _tHOI_GIAN_TAO));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_TAO", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_TAO));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_DAT_HANG::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'ID_DON_VI.
		/// This method will Update one or more existing rows in the database. It will reset the field 'ID_DON_VI' in
		/// all rows which have as value for this field the value as set in property 'ID_DON_VIOld' to 
		/// the value as set in property 'ID_DON_VI'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_DON_VI</LI>
		///		 <LI>ID_DON_VIOld</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWID_DON_VILogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_DAT_HANG_UpdateAllWID_DON_VILogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DON_VI", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DON_VI));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DON_VIOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DON_VIOld));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_DAT_HANG::UpdateAllWID_DON_VILogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'ID_LOAI_DV_YEU_CAU.
		/// This method will Update one or more existing rows in the database. It will reset the field 'ID_LOAI_DV_YEU_CAU' in
		/// all rows which have as value for this field the value as set in property 'ID_LOAI_DV_YEU_CAUOld' to 
		/// the value as set in property 'ID_LOAI_DV_YEU_CAU'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_LOAI_DV_YEU_CAU</LI>
		///		 <LI>ID_LOAI_DV_YEU_CAUOld</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWID_LOAI_DV_YEU_CAULogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_DAT_HANG_UpdateAllWID_LOAI_DV_YEU_CAULogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_LOAI_DV_YEU_CAU", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_LOAI_DV_YEU_CAU));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_LOAI_DV_YEU_CAUOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_LOAI_DV_YEU_CAUOld));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_DAT_HANG::UpdateAllWID_LOAI_DV_YEU_CAULogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'ID_LOAI_THOI_GIAN_CAN_HOAN_THANH.
		/// This method will Update one or more existing rows in the database. It will reset the field 'ID_LOAI_THOI_GIAN_CAN_HOAN_THANH' in
		/// all rows which have as value for this field the value as set in property 'ID_LOAI_THOI_GIAN_CAN_HOAN_THANHOld' to 
		/// the value as set in property 'ID_LOAI_THOI_GIAN_CAN_HOAN_THANH'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_LOAI_THOI_GIAN_CAN_HOAN_THANH</LI>
		///		 <LI>ID_LOAI_THOI_GIAN_CAN_HOAN_THANHOld</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWID_LOAI_THOI_GIAN_CAN_HOAN_THANHLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_DAT_HANG_UpdateAllWID_LOAI_THOI_GIAN_CAN_HOAN_THANHLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_LOAI_THOI_GIAN_CAN_HOAN_THANH", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_LOAI_THOI_GIAN_CAN_HOAN_THANH));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_LOAI_THOI_GIAN_CAN_HOAN_THANHOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_LOAI_THOI_GIAN_CAN_HOAN_THANHOld));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_DAT_HANG::UpdateAllWID_LOAI_THOI_GIAN_CAN_HOAN_THANHLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'ID_TRANG_THAI.
		/// This method will Update one or more existing rows in the database. It will reset the field 'ID_TRANG_THAI' in
		/// all rows which have as value for this field the value as set in property 'ID_TRANG_THAIOld' to 
		/// the value as set in property 'ID_TRANG_THAI'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_TRANG_THAI</LI>
		///		 <LI>ID_TRANG_THAIOld</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWID_TRANG_THAILogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_DAT_HANG_UpdateAllWID_TRANG_THAILogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_TRANG_THAI", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_TRANG_THAI));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_TRANG_THAIOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_TRANG_THAIOld));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_DAT_HANG::UpdateAllWID_TRANG_THAILogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'ID_DANH_GIA_TU_USER_DAT_HANG.
		/// This method will Update one or more existing rows in the database. It will reset the field 'ID_DANH_GIA_TU_USER_DAT_HANG' in
		/// all rows which have as value for this field the value as set in property 'ID_DANH_GIA_TU_USER_DAT_HANGOld' to 
		/// the value as set in property 'ID_DANH_GIA_TU_USER_DAT_HANG'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_DANH_GIA_TU_USER_DAT_HANG. May be SqlDecimal.Null</LI>
		///		 <LI>ID_DANH_GIA_TU_USER_DAT_HANGOld. May be SqlDecimal.Null</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWID_DANH_GIA_TU_USER_DAT_HANGLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_DAT_HANG_UpdateAllWID_DANH_GIA_TU_USER_DAT_HANGLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DANH_GIA_TU_USER_DAT_HANG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DANH_GIA_TU_USER_DAT_HANG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DANH_GIA_TU_USER_DAT_HANGOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DANH_GIA_TU_USER_DAT_HANGOld));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_DAT_HANG::UpdateAllWID_DANH_GIA_TU_USER_DAT_HANGLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'ID_NGUOI_NHAN_DAT_HANG.
		/// This method will Update one or more existing rows in the database. It will reset the field 'ID_NGUOI_NHAN_DAT_HANG' in
		/// all rows which have as value for this field the value as set in property 'ID_NGUOI_NHAN_DAT_HANGOld' to 
		/// the value as set in property 'ID_NGUOI_NHAN_DAT_HANG'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_NGUOI_NHAN_DAT_HANG</LI>
		///		 <LI>ID_NGUOI_NHAN_DAT_HANGOld</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWID_NGUOI_NHAN_DAT_HANGLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_DAT_HANG_UpdateAllWID_NGUOI_NHAN_DAT_HANGLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_NHAN_DAT_HANG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_NHAN_DAT_HANG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_NHAN_DAT_HANGOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_NHAN_DAT_HANGOld));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_DAT_HANG::UpdateAllWID_NGUOI_NHAN_DAT_HANGLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'ID_NGUOI_XU_LY.
		/// This method will Update one or more existing rows in the database. It will reset the field 'ID_NGUOI_XU_LY' in
		/// all rows which have as value for this field the value as set in property 'ID_NGUOI_XU_LYOld' to 
		/// the value as set in property 'ID_NGUOI_XU_LY'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_NGUOI_XU_LY</LI>
		///		 <LI>ID_NGUOI_XU_LYOld</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWID_NGUOI_XU_LYLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_DAT_HANG_UpdateAllWID_NGUOI_XU_LYLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_XU_LY", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_XU_LY));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_XU_LYOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_XU_LYOld));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_DAT_HANG::UpdateAllWID_NGUOI_XU_LYLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'ID_NGUOI_TAO.
		/// This method will Update one or more existing rows in the database. It will reset the field 'ID_NGUOI_TAO' in
		/// all rows which have as value for this field the value as set in property 'ID_NGUOI_TAOOld' to 
		/// the value as set in property 'ID_NGUOI_TAO'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_NGUOI_TAO</LI>
		///		 <LI>ID_NGUOI_TAOOld</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWID_NGUOI_TAOLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_DAT_HANG_UpdateAllWID_NGUOI_TAOLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_TAO", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_TAO));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_TAOOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_TAOOld));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_DAT_HANG::UpdateAllWID_NGUOI_TAOLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_DAT_HANG_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_DAT_HANG::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'ID_DON_VI'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_DON_VI</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWID_DON_VILogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_DAT_HANG_DeleteAllWID_DON_VILogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DON_VI", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DON_VI));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_DAT_HANG::DeleteAllWID_DON_VILogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'ID_LOAI_DV_YEU_CAU'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_LOAI_DV_YEU_CAU</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWID_LOAI_DV_YEU_CAULogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_DAT_HANG_DeleteAllWID_LOAI_DV_YEU_CAULogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_LOAI_DV_YEU_CAU", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_LOAI_DV_YEU_CAU));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_DAT_HANG::DeleteAllWID_LOAI_DV_YEU_CAULogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'ID_LOAI_THOI_GIAN_CAN_HOAN_THANH'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_LOAI_THOI_GIAN_CAN_HOAN_THANH</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWID_LOAI_THOI_GIAN_CAN_HOAN_THANHLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_DAT_HANG_DeleteAllWID_LOAI_THOI_GIAN_CAN_HOAN_THANHLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_LOAI_THOI_GIAN_CAN_HOAN_THANH", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_LOAI_THOI_GIAN_CAN_HOAN_THANH));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_DAT_HANG::DeleteAllWID_LOAI_THOI_GIAN_CAN_HOAN_THANHLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'ID_TRANG_THAI'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_TRANG_THAI</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWID_TRANG_THAILogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_DAT_HANG_DeleteAllWID_TRANG_THAILogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_TRANG_THAI", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_TRANG_THAI));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_DAT_HANG::DeleteAllWID_TRANG_THAILogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'ID_DANH_GIA_TU_USER_DAT_HANG'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_DANH_GIA_TU_USER_DAT_HANG. May be SqlDecimal.Null</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWID_DANH_GIA_TU_USER_DAT_HANGLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_DAT_HANG_DeleteAllWID_DANH_GIA_TU_USER_DAT_HANGLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DANH_GIA_TU_USER_DAT_HANG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DANH_GIA_TU_USER_DAT_HANG));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_DAT_HANG::DeleteAllWID_DANH_GIA_TU_USER_DAT_HANGLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'ID_NGUOI_NHAN_DAT_HANG'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_NGUOI_NHAN_DAT_HANG</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWID_NGUOI_NHAN_DAT_HANGLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_DAT_HANG_DeleteAllWID_NGUOI_NHAN_DAT_HANGLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_NHAN_DAT_HANG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_NHAN_DAT_HANG));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_DAT_HANG::DeleteAllWID_NGUOI_NHAN_DAT_HANGLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'ID_NGUOI_XU_LY'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_NGUOI_XU_LY</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWID_NGUOI_XU_LYLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_DAT_HANG_DeleteAllWID_NGUOI_XU_LYLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_XU_LY", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_XU_LY));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_DAT_HANG::DeleteAllWID_NGUOI_XU_LYLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'ID_NGUOI_TAO'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_NGUOI_TAO</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWID_NGUOI_TAOLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_DAT_HANG_DeleteAllWID_NGUOI_TAOLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_TAO", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_TAO));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_DAT_HANG::DeleteAllWID_NGUOI_TAOLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlDecimal ID
		{
			get
			{
				return _iD;
			}
			set
			{
				SqlDecimal iDTmp = (SqlDecimal)value;
				if(iDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID", "ID can't be NULL");
				}
				_iD = value;
			}
		}


		public SqlString MA_DON_HANG
		{
			get
			{
				return _mA_DON_HANG;
			}
			set
			{
				SqlString mA_DON_HANGTmp = (SqlString)value;
				if(mA_DON_HANGTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MA_DON_HANG", "MA_DON_HANG can't be NULL");
				}
				_mA_DON_HANG = value;
			}
		}


		public SqlString USER_NV_DAT_HANG
		{
			get
			{
				return _uSER_NV_DAT_HANG;
			}
			set
			{
				SqlString uSER_NV_DAT_HANGTmp = (SqlString)value;
				if(uSER_NV_DAT_HANGTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("USER_NV_DAT_HANG", "USER_NV_DAT_HANG can't be NULL");
				}
				_uSER_NV_DAT_HANG = value;
			}
		}


		public SqlDecimal ID_DON_VI
		{
			get
			{
				return _iD_DON_VI;
			}
			set
			{
				SqlDecimal iD_DON_VITmp = (SqlDecimal)value;
				if(iD_DON_VITmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_DON_VI", "ID_DON_VI can't be NULL");
				}
				_iD_DON_VI = value;
			}
		}
		public SqlDecimal ID_DON_VIOld
		{
			get
			{
				return _iD_DON_VIOld;
			}
			set
			{
				SqlDecimal iD_DON_VIOldTmp = (SqlDecimal)value;
				if(iD_DON_VIOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_DON_VIOld", "ID_DON_VIOld can't be NULL");
				}
				_iD_DON_VIOld = value;
			}
		}


		public SqlString DIEN_THOAI
		{
			get
			{
				return _dIEN_THOAI;
			}
			set
			{
				SqlString dIEN_THOAITmp = (SqlString)value;
				if(dIEN_THOAITmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("DIEN_THOAI", "DIEN_THOAI can't be NULL");
				}
				_dIEN_THOAI = value;
			}
		}


		public SqlString HO_TEN_USER_DAT_HANG
		{
			get
			{
				return _hO_TEN_USER_DAT_HANG;
			}
			set
			{
				SqlString hO_TEN_USER_DAT_HANGTmp = (SqlString)value;
				if(hO_TEN_USER_DAT_HANGTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("HO_TEN_USER_DAT_HANG", "HO_TEN_USER_DAT_HANG can't be NULL");
				}
				_hO_TEN_USER_DAT_HANG = value;
			}
		}


		public SqlDateTime THOI_GIAN_DAT_HANG
		{
			get
			{
				return _tHOI_GIAN_DAT_HANG;
			}
			set
			{
				SqlDateTime tHOI_GIAN_DAT_HANGTmp = (SqlDateTime)value;
				if(tHOI_GIAN_DAT_HANGTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("THOI_GIAN_DAT_HANG", "THOI_GIAN_DAT_HANG can't be NULL");
				}
				_tHOI_GIAN_DAT_HANG = value;
			}
		}


		public SqlDecimal ID_LOAI_DV_YEU_CAU
		{
			get
			{
				return _iD_LOAI_DV_YEU_CAU;
			}
			set
			{
				SqlDecimal iD_LOAI_DV_YEU_CAUTmp = (SqlDecimal)value;
				if(iD_LOAI_DV_YEU_CAUTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_LOAI_DV_YEU_CAU", "ID_LOAI_DV_YEU_CAU can't be NULL");
				}
				_iD_LOAI_DV_YEU_CAU = value;
			}
		}
		public SqlDecimal ID_LOAI_DV_YEU_CAUOld
		{
			get
			{
				return _iD_LOAI_DV_YEU_CAUOld;
			}
			set
			{
				SqlDecimal iD_LOAI_DV_YEU_CAUOldTmp = (SqlDecimal)value;
				if(iD_LOAI_DV_YEU_CAUOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_LOAI_DV_YEU_CAUOld", "ID_LOAI_DV_YEU_CAUOld can't be NULL");
				}
				_iD_LOAI_DV_YEU_CAUOld = value;
			}
		}


		public SqlString NOI_DUNG_DAT_HANG
		{
			get
			{
				return _nOI_DUNG_DAT_HANG;
			}
			set
			{
				SqlString nOI_DUNG_DAT_HANGTmp = (SqlString)value;
				if(nOI_DUNG_DAT_HANGTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NOI_DUNG_DAT_HANG", "NOI_DUNG_DAT_HANG can't be NULL");
				}
				_nOI_DUNG_DAT_HANG = value;
			}
		}


		public SqlDecimal ID_LOAI_THOI_GIAN_CAN_HOAN_THANH
		{
			get
			{
				return _iD_LOAI_THOI_GIAN_CAN_HOAN_THANH;
			}
			set
			{
				SqlDecimal iD_LOAI_THOI_GIAN_CAN_HOAN_THANHTmp = (SqlDecimal)value;
				if(iD_LOAI_THOI_GIAN_CAN_HOAN_THANHTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_LOAI_THOI_GIAN_CAN_HOAN_THANH", "ID_LOAI_THOI_GIAN_CAN_HOAN_THANH can't be NULL");
				}
				_iD_LOAI_THOI_GIAN_CAN_HOAN_THANH = value;
			}
		}
		public SqlDecimal ID_LOAI_THOI_GIAN_CAN_HOAN_THANHOld
		{
			get
			{
				return _iD_LOAI_THOI_GIAN_CAN_HOAN_THANHOld;
			}
			set
			{
				SqlDecimal iD_LOAI_THOI_GIAN_CAN_HOAN_THANHOldTmp = (SqlDecimal)value;
				if(iD_LOAI_THOI_GIAN_CAN_HOAN_THANHOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_LOAI_THOI_GIAN_CAN_HOAN_THANHOld", "ID_LOAI_THOI_GIAN_CAN_HOAN_THANHOld can't be NULL");
				}
				_iD_LOAI_THOI_GIAN_CAN_HOAN_THANHOld = value;
			}
		}


		public SqlString PHAN_HOI_TU_DVMC
		{
			get
			{
				return _pHAN_HOI_TU_DVMC;
			}
			set
			{
				SqlString pHAN_HOI_TU_DVMCTmp = (SqlString)value;
				if(pHAN_HOI_TU_DVMCTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("PHAN_HOI_TU_DVMC", "PHAN_HOI_TU_DVMC can't be NULL");
				}
				_pHAN_HOI_TU_DVMC = value;
			}
		}


		public SqlDateTime THOI_GIAN_HOAN_THANH
		{
			get
			{
				return _tHOI_GIAN_HOAN_THANH;
			}
			set
			{
				SqlDateTime tHOI_GIAN_HOAN_THANHTmp = (SqlDateTime)value;
				if(tHOI_GIAN_HOAN_THANHTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("THOI_GIAN_HOAN_THANH", "THOI_GIAN_HOAN_THANH can't be NULL");
				}
				_tHOI_GIAN_HOAN_THANH = value;
			}
		}


		public SqlDecimal ID_TRANG_THAI
		{
			get
			{
				return _iD_TRANG_THAI;
			}
			set
			{
				SqlDecimal iD_TRANG_THAITmp = (SqlDecimal)value;
				if(iD_TRANG_THAITmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_TRANG_THAI", "ID_TRANG_THAI can't be NULL");
				}
				_iD_TRANG_THAI = value;
			}
		}
		public SqlDecimal ID_TRANG_THAIOld
		{
			get
			{
				return _iD_TRANG_THAIOld;
			}
			set
			{
				SqlDecimal iD_TRANG_THAIOldTmp = (SqlDecimal)value;
				if(iD_TRANG_THAIOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_TRANG_THAIOld", "ID_TRANG_THAIOld can't be NULL");
				}
				_iD_TRANG_THAIOld = value;
			}
		}


		public SqlDecimal ID_DANH_GIA_TU_USER_DAT_HANG
		{
			get
			{
				return _iD_DANH_GIA_TU_USER_DAT_HANG;
			}
			set
			{
				SqlDecimal iD_DANH_GIA_TU_USER_DAT_HANGTmp = (SqlDecimal)value;
				if(iD_DANH_GIA_TU_USER_DAT_HANGTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_DANH_GIA_TU_USER_DAT_HANG", "ID_DANH_GIA_TU_USER_DAT_HANG can't be NULL");
				}
				_iD_DANH_GIA_TU_USER_DAT_HANG = value;
			}
		}
		public SqlDecimal ID_DANH_GIA_TU_USER_DAT_HANGOld
		{
			get
			{
				return _iD_DANH_GIA_TU_USER_DAT_HANGOld;
			}
			set
			{
				SqlDecimal iD_DANH_GIA_TU_USER_DAT_HANGOldTmp = (SqlDecimal)value;
				if(iD_DANH_GIA_TU_USER_DAT_HANGOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_DANH_GIA_TU_USER_DAT_HANGOld", "ID_DANH_GIA_TU_USER_DAT_HANGOld can't be NULL");
				}
				_iD_DANH_GIA_TU_USER_DAT_HANGOld = value;
			}
		}


		public SqlString Y_KIEN_KHAC_TU_USER_DAT_HANG
		{
			get
			{
				return _y_KIEN_KHAC_TU_USER_DAT_HANG;
			}
			set
			{
				SqlString y_KIEN_KHAC_TU_USER_DAT_HANGTmp = (SqlString)value;
				if(y_KIEN_KHAC_TU_USER_DAT_HANGTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Y_KIEN_KHAC_TU_USER_DAT_HANG", "Y_KIEN_KHAC_TU_USER_DAT_HANG can't be NULL");
				}
				_y_KIEN_KHAC_TU_USER_DAT_HANG = value;
			}
		}


		public SqlDecimal ID_NGUOI_NHAN_DAT_HANG
		{
			get
			{
				return _iD_NGUOI_NHAN_DAT_HANG;
			}
			set
			{
				SqlDecimal iD_NGUOI_NHAN_DAT_HANGTmp = (SqlDecimal)value;
				if(iD_NGUOI_NHAN_DAT_HANGTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_NGUOI_NHAN_DAT_HANG", "ID_NGUOI_NHAN_DAT_HANG can't be NULL");
				}
				_iD_NGUOI_NHAN_DAT_HANG = value;
			}
		}
		public SqlDecimal ID_NGUOI_NHAN_DAT_HANGOld
		{
			get
			{
				return _iD_NGUOI_NHAN_DAT_HANGOld;
			}
			set
			{
				SqlDecimal iD_NGUOI_NHAN_DAT_HANGOldTmp = (SqlDecimal)value;
				if(iD_NGUOI_NHAN_DAT_HANGOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_NGUOI_NHAN_DAT_HANGOld", "ID_NGUOI_NHAN_DAT_HANGOld can't be NULL");
				}
				_iD_NGUOI_NHAN_DAT_HANGOld = value;
			}
		}


		public SqlDecimal ID_NGUOI_XU_LY
		{
			get
			{
				return _iD_NGUOI_XU_LY;
			}
			set
			{
				SqlDecimal iD_NGUOI_XU_LYTmp = (SqlDecimal)value;
				if(iD_NGUOI_XU_LYTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_NGUOI_XU_LY", "ID_NGUOI_XU_LY can't be NULL");
				}
				_iD_NGUOI_XU_LY = value;
			}
		}
		public SqlDecimal ID_NGUOI_XU_LYOld
		{
			get
			{
				return _iD_NGUOI_XU_LYOld;
			}
			set
			{
				SqlDecimal iD_NGUOI_XU_LYOldTmp = (SqlDecimal)value;
				if(iD_NGUOI_XU_LYOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_NGUOI_XU_LYOld", "ID_NGUOI_XU_LYOld can't be NULL");
				}
				_iD_NGUOI_XU_LYOld = value;
			}
		}


		public SqlDateTime THOI_GIAN_TAO
		{
			get
			{
				return _tHOI_GIAN_TAO;
			}
			set
			{
				SqlDateTime tHOI_GIAN_TAOTmp = (SqlDateTime)value;
				if(tHOI_GIAN_TAOTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("THOI_GIAN_TAO", "THOI_GIAN_TAO can't be NULL");
				}
				_tHOI_GIAN_TAO = value;
			}
		}


		public SqlDecimal ID_NGUOI_TAO
		{
			get
			{
				return _iD_NGUOI_TAO;
			}
			set
			{
				SqlDecimal iD_NGUOI_TAOTmp = (SqlDecimal)value;
				if(iD_NGUOI_TAOTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_NGUOI_TAO", "ID_NGUOI_TAO can't be NULL");
				}
				_iD_NGUOI_TAO = value;
			}
		}
		public SqlDecimal ID_NGUOI_TAOOld
		{
			get
			{
				return _iD_NGUOI_TAOOld;
			}
			set
			{
				SqlDecimal iD_NGUOI_TAOOldTmp = (SqlDecimal)value;
				if(iD_NGUOI_TAOOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_NGUOI_TAOOld", "ID_NGUOI_TAOOld can't be NULL");
				}
				_iD_NGUOI_TAOOld = value;
			}
		}
		#endregion
	}
}
