///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'DM_CATEGORY'
// Generated by LLBLGen v1.21.2003.712 Final on: Monday, 15 August 2011, 1:46:27 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace QuanLyBanHangLLBL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'DM_CATEGORY'.
	/// </summary>
	public class DM_CATEGORY : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDecimal		_cATEGORY_PARENT_ID, _cATEGORY_PARENT_IDOld, _dISPLAY_ORDER, _dISPLAY_LEVEL, _iD;
			private SqlString		_cATEGORY_DESCRIPTION, _cATEGORY_NAME, _cATEGORY_CODE;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public DM_CATEGORY()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>CATEGORY_CODE</LI>
		///		 <LI>CATEGORY_NAME</LI>
		///		 <LI>CATEGORY_PARENT_ID. May be SqlDecimal.Null</LI>
		///		 <LI>DISPLAY_ORDER. May be SqlDecimal.Null</LI>
		///		 <LI>DISPLAY_LEVEL. May be SqlDecimal.Null</LI>
		///		 <LI>CATEGORY_DESCRIPTION. May be SqlString.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_DM_CATEGORY_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@CATEGORY_CODE", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _cATEGORY_CODE));
				cmdToExecute.Parameters.Add(new SqlParameter("@CATEGORY_NAME", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _cATEGORY_NAME));
				cmdToExecute.Parameters.Add(new SqlParameter("@CATEGORY_PARENT_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _cATEGORY_PARENT_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@DISPLAY_ORDER", SqlDbType.Decimal, 5, ParameterDirection.Input, false, 4, 1, "", DataRowVersion.Proposed, _dISPLAY_ORDER));
				cmdToExecute.Parameters.Add(new SqlParameter("@DISPLAY_LEVEL", SqlDbType.Decimal, 5, ParameterDirection.Input, false, 4, 1, "", DataRowVersion.Proposed, _dISPLAY_LEVEL));
				cmdToExecute.Parameters.Add(new SqlParameter("@CATEGORY_DESCRIPTION", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _cATEGORY_DESCRIPTION));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Output, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_iD = (Decimal)cmdToExecute.Parameters["@ID"].Value;
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("DM_CATEGORY::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		///		 <LI>CATEGORY_CODE</LI>
		///		 <LI>CATEGORY_NAME</LI>
		///		 <LI>CATEGORY_PARENT_ID. May be SqlDecimal.Null</LI>
		///		 <LI>DISPLAY_ORDER. May be SqlDecimal.Null</LI>
		///		 <LI>DISPLAY_LEVEL. May be SqlDecimal.Null</LI>
		///		 <LI>CATEGORY_DESCRIPTION. May be SqlString.Null</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_DM_CATEGORY_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));
				cmdToExecute.Parameters.Add(new SqlParameter("@CATEGORY_CODE", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _cATEGORY_CODE));
				cmdToExecute.Parameters.Add(new SqlParameter("@CATEGORY_NAME", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _cATEGORY_NAME));
				cmdToExecute.Parameters.Add(new SqlParameter("@CATEGORY_PARENT_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _cATEGORY_PARENT_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@DISPLAY_ORDER", SqlDbType.Decimal, 5, ParameterDirection.Input, false, 4, 1, "", DataRowVersion.Proposed, _dISPLAY_ORDER));
				cmdToExecute.Parameters.Add(new SqlParameter("@DISPLAY_LEVEL", SqlDbType.Decimal, 5, ParameterDirection.Input, false, 4, 1, "", DataRowVersion.Proposed, _dISPLAY_LEVEL));
				cmdToExecute.Parameters.Add(new SqlParameter("@CATEGORY_DESCRIPTION", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _cATEGORY_DESCRIPTION));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("DM_CATEGORY::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'CATEGORY_PARENT_ID.
		/// This method will Update one or more existing rows in the database. It will reset the field 'CATEGORY_PARENT_ID' in
		/// all rows which have as value for this field the value as set in property 'CATEGORY_PARENT_IDOld' to 
		/// the value as set in property 'CATEGORY_PARENT_ID'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>CATEGORY_PARENT_ID. May be SqlDecimal.Null</LI>
		///		 <LI>CATEGORY_PARENT_IDOld. May be SqlDecimal.Null</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWCATEGORY_PARENT_IDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_DM_CATEGORY_UpdateAllWCATEGORY_PARENT_IDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@CATEGORY_PARENT_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _cATEGORY_PARENT_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@CATEGORY_PARENT_IDOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _cATEGORY_PARENT_IDOld));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("DM_CATEGORY::UpdateAllWCATEGORY_PARENT_IDLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_DM_CATEGORY_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("DM_CATEGORY::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'CATEGORY_PARENT_ID'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>CATEGORY_PARENT_ID. May be SqlDecimal.Null</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWCATEGORY_PARENT_IDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_DM_CATEGORY_DeleteAllWCATEGORY_PARENT_IDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@CATEGORY_PARENT_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _cATEGORY_PARENT_ID));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("DM_CATEGORY::DeleteAllWCATEGORY_PARENT_IDLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlDecimal ID
		{
			get
			{
				return _iD;
			}
			set
			{
				SqlDecimal iDTmp = (SqlDecimal)value;
				if(iDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID", "ID can't be NULL");
				}
				_iD = value;
			}
		}


		public SqlString CATEGORY_CODE
		{
			get
			{
				return _cATEGORY_CODE;
			}
			set
			{
				SqlString cATEGORY_CODETmp = (SqlString)value;
				if(cATEGORY_CODETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CATEGORY_CODE", "CATEGORY_CODE can't be NULL");
				}
				_cATEGORY_CODE = value;
			}
		}


		public SqlString CATEGORY_NAME
		{
			get
			{
				return _cATEGORY_NAME;
			}
			set
			{
				SqlString cATEGORY_NAMETmp = (SqlString)value;
				if(cATEGORY_NAMETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CATEGORY_NAME", "CATEGORY_NAME can't be NULL");
				}
				_cATEGORY_NAME = value;
			}
		}


		public SqlDecimal CATEGORY_PARENT_ID
		{
			get
			{
				return _cATEGORY_PARENT_ID;
			}
			set
			{
				SqlDecimal cATEGORY_PARENT_IDTmp = (SqlDecimal)value;
				if(cATEGORY_PARENT_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CATEGORY_PARENT_ID", "CATEGORY_PARENT_ID can't be NULL");
				}
				_cATEGORY_PARENT_ID = value;
			}
		}
		public SqlDecimal CATEGORY_PARENT_IDOld
		{
			get
			{
				return _cATEGORY_PARENT_IDOld;
			}
			set
			{
				SqlDecimal cATEGORY_PARENT_IDOldTmp = (SqlDecimal)value;
				if(cATEGORY_PARENT_IDOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CATEGORY_PARENT_IDOld", "CATEGORY_PARENT_IDOld can't be NULL");
				}
				_cATEGORY_PARENT_IDOld = value;
			}
		}


		public SqlDecimal DISPLAY_ORDER
		{
			get
			{
				return _dISPLAY_ORDER;
			}
			set
			{
				SqlDecimal dISPLAY_ORDERTmp = (SqlDecimal)value;
				if(dISPLAY_ORDERTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("DISPLAY_ORDER", "DISPLAY_ORDER can't be NULL");
				}
				_dISPLAY_ORDER = value;
			}
		}


		public SqlDecimal DISPLAY_LEVEL
		{
			get
			{
				return _dISPLAY_LEVEL;
			}
			set
			{
				SqlDecimal dISPLAY_LEVELTmp = (SqlDecimal)value;
				if(dISPLAY_LEVELTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("DISPLAY_LEVEL", "DISPLAY_LEVEL can't be NULL");
				}
				_dISPLAY_LEVEL = value;
			}
		}


		public SqlString CATEGORY_DESCRIPTION
		{
			get
			{
				return _cATEGORY_DESCRIPTION;
			}
			set
			{
				SqlString cATEGORY_DESCRIPTIONTmp = (SqlString)value;
				if(cATEGORY_DESCRIPTIONTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CATEGORY_DESCRIPTION", "CATEGORY_DESCRIPTION can't be NULL");
				}
				_cATEGORY_DESCRIPTION = value;
			}
		}
		#endregion
	}
}
