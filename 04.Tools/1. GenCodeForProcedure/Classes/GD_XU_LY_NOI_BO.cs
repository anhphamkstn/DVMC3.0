///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'GD_XU_LY_NOI_BO'
// Generated by LLBLGen v1.21.2003.712 Final on: Thursday, March 27, 2014, 11:46:45 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace TOS_TicketSystemLLBL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'GD_XU_LY_NOI_BO'.
	/// </summary>
	public class GD_XU_LY_NOI_BO : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		_sTART_TIME, _eND_TIME, _dATETIME_RESPOND;
			private SqlDecimal		_rINGTIME, _dURATION, _sTATION_ID, _iD_NGUOI_LIEN_QUAN, _iD_HANH_DONG_NOI_BO, _iD_HANH_DONG_NOI_BOOld, _iD_CAU_HOI, _iD_CUOC_GOI, _iD_USER_GOI, _iD_USER_GOIOld, _iD;
			private SqlString		_eRROR_DESC, _sTATUS, _cALL_ID, _eRROR_CODE, _gHI_CHU, _nOI_DUNG_TRAO_DOI, _vOICE_CALL_LINK, _dUNG_SO_KHAC_YN, _sO_DIEN_THOAI_GOI;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public GD_XU_LY_NOI_BO()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_CAU_HOI. May be SqlDecimal.Null</LI>
		///		 <LI>ID_CUOC_GOI. May be SqlDecimal.Null</LI>
		///		 <LI>ID_USER_GOI</LI>
		///		 <LI>SO_DIEN_THOAI_GOI. May be SqlString.Null</LI>
		///		 <LI>ID_HANH_DONG_NOI_BO</LI>
		///		 <LI>ID_NGUOI_LIEN_QUAN. May be SqlDecimal.Null</LI>
		///		 <LI>DUNG_SO_KHAC_YN</LI>
		///		 <LI>NOI_DUNG_TRAO_DOI. May be SqlString.Null</LI>
		///		 <LI>GHI_CHU. May be SqlString.Null</LI>
		///		 <LI>CALL_ID. May be SqlString.Null</LI>
		///		 <LI>VOICE_CALL_LINK. May be SqlString.Null</LI>
		///		 <LI>START_TIME. May be SqlDateTime.Null</LI>
		///		 <LI>END_TIME. May be SqlDateTime.Null</LI>
		///		 <LI>STATION_ID. May be SqlDecimal.Null</LI>
		///		 <LI>DURATION. May be SqlDecimal.Null</LI>
		///		 <LI>STATUS. May be SqlString.Null</LI>
		///		 <LI>ERROR_CODE. May be SqlString.Null</LI>
		///		 <LI>ERROR_DESC. May be SqlString.Null</LI>
		///		 <LI>DATETIME_RESPOND. May be SqlDateTime.Null</LI>
		///		 <LI>RINGTIME. May be SqlDecimal.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_XU_LY_NOI_BO_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_CAU_HOI", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_CAU_HOI));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_CUOC_GOI", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_CUOC_GOI));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_USER_GOI", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_USER_GOI));
				cmdToExecute.Parameters.Add(new SqlParameter("@SO_DIEN_THOAI_GOI", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _sO_DIEN_THOAI_GOI));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_HANH_DONG_NOI_BO", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_HANH_DONG_NOI_BO));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_LIEN_QUAN", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_LIEN_QUAN));
				cmdToExecute.Parameters.Add(new SqlParameter("@DUNG_SO_KHAC_YN", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _dUNG_SO_KHAC_YN));
				cmdToExecute.Parameters.Add(new SqlParameter("@NOI_DUNG_TRAO_DOI", SqlDbType.NVarChar, 3000, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nOI_DUNG_TRAO_DOI));
				cmdToExecute.Parameters.Add(new SqlParameter("@GHI_CHU", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _gHI_CHU));
				cmdToExecute.Parameters.Add(new SqlParameter("@CALL_ID", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _cALL_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@VOICE_CALL_LINK", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _vOICE_CALL_LINK));
				cmdToExecute.Parameters.Add(new SqlParameter("@START_TIME", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _sTART_TIME));
				cmdToExecute.Parameters.Add(new SqlParameter("@END_TIME", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _eND_TIME));
				cmdToExecute.Parameters.Add(new SqlParameter("@STATION_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _sTATION_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@DURATION", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _dURATION));
				cmdToExecute.Parameters.Add(new SqlParameter("@STATUS", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _sTATUS));
				cmdToExecute.Parameters.Add(new SqlParameter("@ERROR_CODE", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _eRROR_CODE));
				cmdToExecute.Parameters.Add(new SqlParameter("@ERROR_DESC", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _eRROR_DESC));
				cmdToExecute.Parameters.Add(new SqlParameter("@DATETIME_RESPOND", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _dATETIME_RESPOND));
				cmdToExecute.Parameters.Add(new SqlParameter("@RINGTIME", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _rINGTIME));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Output, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_iD = (Decimal)cmdToExecute.Parameters["@ID"].Value;
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_XU_LY_NOI_BO::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		///		 <LI>ID_CAU_HOI. May be SqlDecimal.Null</LI>
		///		 <LI>ID_CUOC_GOI. May be SqlDecimal.Null</LI>
		///		 <LI>ID_USER_GOI</LI>
		///		 <LI>SO_DIEN_THOAI_GOI. May be SqlString.Null</LI>
		///		 <LI>ID_HANH_DONG_NOI_BO</LI>
		///		 <LI>ID_NGUOI_LIEN_QUAN. May be SqlDecimal.Null</LI>
		///		 <LI>DUNG_SO_KHAC_YN</LI>
		///		 <LI>NOI_DUNG_TRAO_DOI. May be SqlString.Null</LI>
		///		 <LI>GHI_CHU. May be SqlString.Null</LI>
		///		 <LI>CALL_ID. May be SqlString.Null</LI>
		///		 <LI>VOICE_CALL_LINK. May be SqlString.Null</LI>
		///		 <LI>START_TIME. May be SqlDateTime.Null</LI>
		///		 <LI>END_TIME. May be SqlDateTime.Null</LI>
		///		 <LI>STATION_ID. May be SqlDecimal.Null</LI>
		///		 <LI>DURATION. May be SqlDecimal.Null</LI>
		///		 <LI>STATUS. May be SqlString.Null</LI>
		///		 <LI>ERROR_CODE. May be SqlString.Null</LI>
		///		 <LI>ERROR_DESC. May be SqlString.Null</LI>
		///		 <LI>DATETIME_RESPOND. May be SqlDateTime.Null</LI>
		///		 <LI>RINGTIME. May be SqlDecimal.Null</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_XU_LY_NOI_BO_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_CAU_HOI", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_CAU_HOI));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_CUOC_GOI", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_CUOC_GOI));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_USER_GOI", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_USER_GOI));
				cmdToExecute.Parameters.Add(new SqlParameter("@SO_DIEN_THOAI_GOI", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _sO_DIEN_THOAI_GOI));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_HANH_DONG_NOI_BO", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_HANH_DONG_NOI_BO));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_LIEN_QUAN", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_LIEN_QUAN));
				cmdToExecute.Parameters.Add(new SqlParameter("@DUNG_SO_KHAC_YN", SqlDbType.NVarChar, 1, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _dUNG_SO_KHAC_YN));
				cmdToExecute.Parameters.Add(new SqlParameter("@NOI_DUNG_TRAO_DOI", SqlDbType.NVarChar, 3000, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nOI_DUNG_TRAO_DOI));
				cmdToExecute.Parameters.Add(new SqlParameter("@GHI_CHU", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _gHI_CHU));
				cmdToExecute.Parameters.Add(new SqlParameter("@CALL_ID", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _cALL_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@VOICE_CALL_LINK", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _vOICE_CALL_LINK));
				cmdToExecute.Parameters.Add(new SqlParameter("@START_TIME", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _sTART_TIME));
				cmdToExecute.Parameters.Add(new SqlParameter("@END_TIME", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _eND_TIME));
				cmdToExecute.Parameters.Add(new SqlParameter("@STATION_ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _sTATION_ID));
				cmdToExecute.Parameters.Add(new SqlParameter("@DURATION", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _dURATION));
				cmdToExecute.Parameters.Add(new SqlParameter("@STATUS", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _sTATUS));
				cmdToExecute.Parameters.Add(new SqlParameter("@ERROR_CODE", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _eRROR_CODE));
				cmdToExecute.Parameters.Add(new SqlParameter("@ERROR_DESC", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _eRROR_DESC));
				cmdToExecute.Parameters.Add(new SqlParameter("@DATETIME_RESPOND", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _dATETIME_RESPOND));
				cmdToExecute.Parameters.Add(new SqlParameter("@RINGTIME", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _rINGTIME));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_XU_LY_NOI_BO::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'ID_USER_GOI.
		/// This method will Update one or more existing rows in the database. It will reset the field 'ID_USER_GOI' in
		/// all rows which have as value for this field the value as set in property 'ID_USER_GOIOld' to 
		/// the value as set in property 'ID_USER_GOI'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_USER_GOI</LI>
		///		 <LI>ID_USER_GOIOld</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWID_USER_GOILogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_XU_LY_NOI_BO_UpdateAllWID_USER_GOILogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_USER_GOI", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_USER_GOI));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_USER_GOIOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_USER_GOIOld));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_XU_LY_NOI_BO::UpdateAllWID_USER_GOILogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'ID_HANH_DONG_NOI_BO.
		/// This method will Update one or more existing rows in the database. It will reset the field 'ID_HANH_DONG_NOI_BO' in
		/// all rows which have as value for this field the value as set in property 'ID_HANH_DONG_NOI_BOOld' to 
		/// the value as set in property 'ID_HANH_DONG_NOI_BO'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_HANH_DONG_NOI_BO</LI>
		///		 <LI>ID_HANH_DONG_NOI_BOOld</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWID_HANH_DONG_NOI_BOLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_XU_LY_NOI_BO_UpdateAllWID_HANH_DONG_NOI_BOLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_HANH_DONG_NOI_BO", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_HANH_DONG_NOI_BO));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_HANH_DONG_NOI_BOOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_HANH_DONG_NOI_BOOld));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_XU_LY_NOI_BO::UpdateAllWID_HANH_DONG_NOI_BOLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_XU_LY_NOI_BO_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_XU_LY_NOI_BO::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'ID_USER_GOI'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_USER_GOI</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWID_USER_GOILogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_XU_LY_NOI_BO_DeleteAllWID_USER_GOILogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_USER_GOI", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_USER_GOI));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_XU_LY_NOI_BO::DeleteAllWID_USER_GOILogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'ID_HANH_DONG_NOI_BO'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_HANH_DONG_NOI_BO</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWID_HANH_DONG_NOI_BOLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_XU_LY_NOI_BO_DeleteAllWID_HANH_DONG_NOI_BOLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_HANH_DONG_NOI_BO", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_HANH_DONG_NOI_BO));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_XU_LY_NOI_BO::DeleteAllWID_HANH_DONG_NOI_BOLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlDecimal ID
		{
			get
			{
				return _iD;
			}
			set
			{
				SqlDecimal iDTmp = (SqlDecimal)value;
				if(iDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID", "ID can't be NULL");
				}
				_iD = value;
			}
		}


		public SqlDecimal ID_CAU_HOI
		{
			get
			{
				return _iD_CAU_HOI;
			}
			set
			{
				SqlDecimal iD_CAU_HOITmp = (SqlDecimal)value;
				if(iD_CAU_HOITmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_CAU_HOI", "ID_CAU_HOI can't be NULL");
				}
				_iD_CAU_HOI = value;
			}
		}


		public SqlDecimal ID_CUOC_GOI
		{
			get
			{
				return _iD_CUOC_GOI;
			}
			set
			{
				SqlDecimal iD_CUOC_GOITmp = (SqlDecimal)value;
				if(iD_CUOC_GOITmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_CUOC_GOI", "ID_CUOC_GOI can't be NULL");
				}
				_iD_CUOC_GOI = value;
			}
		}


		public SqlDecimal ID_USER_GOI
		{
			get
			{
				return _iD_USER_GOI;
			}
			set
			{
				SqlDecimal iD_USER_GOITmp = (SqlDecimal)value;
				if(iD_USER_GOITmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_USER_GOI", "ID_USER_GOI can't be NULL");
				}
				_iD_USER_GOI = value;
			}
		}
		public SqlDecimal ID_USER_GOIOld
		{
			get
			{
				return _iD_USER_GOIOld;
			}
			set
			{
				SqlDecimal iD_USER_GOIOldTmp = (SqlDecimal)value;
				if(iD_USER_GOIOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_USER_GOIOld", "ID_USER_GOIOld can't be NULL");
				}
				_iD_USER_GOIOld = value;
			}
		}


		public SqlString SO_DIEN_THOAI_GOI
		{
			get
			{
				return _sO_DIEN_THOAI_GOI;
			}
			set
			{
				SqlString sO_DIEN_THOAI_GOITmp = (SqlString)value;
				if(sO_DIEN_THOAI_GOITmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("SO_DIEN_THOAI_GOI", "SO_DIEN_THOAI_GOI can't be NULL");
				}
				_sO_DIEN_THOAI_GOI = value;
			}
		}


		public SqlDecimal ID_HANH_DONG_NOI_BO
		{
			get
			{
				return _iD_HANH_DONG_NOI_BO;
			}
			set
			{
				SqlDecimal iD_HANH_DONG_NOI_BOTmp = (SqlDecimal)value;
				if(iD_HANH_DONG_NOI_BOTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_HANH_DONG_NOI_BO", "ID_HANH_DONG_NOI_BO can't be NULL");
				}
				_iD_HANH_DONG_NOI_BO = value;
			}
		}
		public SqlDecimal ID_HANH_DONG_NOI_BOOld
		{
			get
			{
				return _iD_HANH_DONG_NOI_BOOld;
			}
			set
			{
				SqlDecimal iD_HANH_DONG_NOI_BOOldTmp = (SqlDecimal)value;
				if(iD_HANH_DONG_NOI_BOOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_HANH_DONG_NOI_BOOld", "ID_HANH_DONG_NOI_BOOld can't be NULL");
				}
				_iD_HANH_DONG_NOI_BOOld = value;
			}
		}


		public SqlDecimal ID_NGUOI_LIEN_QUAN
		{
			get
			{
				return _iD_NGUOI_LIEN_QUAN;
			}
			set
			{
				SqlDecimal iD_NGUOI_LIEN_QUANTmp = (SqlDecimal)value;
				if(iD_NGUOI_LIEN_QUANTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_NGUOI_LIEN_QUAN", "ID_NGUOI_LIEN_QUAN can't be NULL");
				}
				_iD_NGUOI_LIEN_QUAN = value;
			}
		}


		public SqlString DUNG_SO_KHAC_YN
		{
			get
			{
				return _dUNG_SO_KHAC_YN;
			}
			set
			{
				SqlString dUNG_SO_KHAC_YNTmp = (SqlString)value;
				if(dUNG_SO_KHAC_YNTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("DUNG_SO_KHAC_YN", "DUNG_SO_KHAC_YN can't be NULL");
				}
				_dUNG_SO_KHAC_YN = value;
			}
		}


		public SqlString NOI_DUNG_TRAO_DOI
		{
			get
			{
				return _nOI_DUNG_TRAO_DOI;
			}
			set
			{
				SqlString nOI_DUNG_TRAO_DOITmp = (SqlString)value;
				if(nOI_DUNG_TRAO_DOITmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("NOI_DUNG_TRAO_DOI", "NOI_DUNG_TRAO_DOI can't be NULL");
				}
				_nOI_DUNG_TRAO_DOI = value;
			}
		}


		public SqlString GHI_CHU
		{
			get
			{
				return _gHI_CHU;
			}
			set
			{
				SqlString gHI_CHUTmp = (SqlString)value;
				if(gHI_CHUTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("GHI_CHU", "GHI_CHU can't be NULL");
				}
				_gHI_CHU = value;
			}
		}


		public SqlString CALL_ID
		{
			get
			{
				return _cALL_ID;
			}
			set
			{
				SqlString cALL_IDTmp = (SqlString)value;
				if(cALL_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CALL_ID", "CALL_ID can't be NULL");
				}
				_cALL_ID = value;
			}
		}


		public SqlString VOICE_CALL_LINK
		{
			get
			{
				return _vOICE_CALL_LINK;
			}
			set
			{
				SqlString vOICE_CALL_LINKTmp = (SqlString)value;
				if(vOICE_CALL_LINKTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("VOICE_CALL_LINK", "VOICE_CALL_LINK can't be NULL");
				}
				_vOICE_CALL_LINK = value;
			}
		}


		public SqlDateTime START_TIME
		{
			get
			{
				return _sTART_TIME;
			}
			set
			{
				SqlDateTime sTART_TIMETmp = (SqlDateTime)value;
				if(sTART_TIMETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("START_TIME", "START_TIME can't be NULL");
				}
				_sTART_TIME = value;
			}
		}


		public SqlDateTime END_TIME
		{
			get
			{
				return _eND_TIME;
			}
			set
			{
				SqlDateTime eND_TIMETmp = (SqlDateTime)value;
				if(eND_TIMETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("END_TIME", "END_TIME can't be NULL");
				}
				_eND_TIME = value;
			}
		}


		public SqlDecimal STATION_ID
		{
			get
			{
				return _sTATION_ID;
			}
			set
			{
				SqlDecimal sTATION_IDTmp = (SqlDecimal)value;
				if(sTATION_IDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("STATION_ID", "STATION_ID can't be NULL");
				}
				_sTATION_ID = value;
			}
		}


		public SqlDecimal DURATION
		{
			get
			{
				return _dURATION;
			}
			set
			{
				SqlDecimal dURATIONTmp = (SqlDecimal)value;
				if(dURATIONTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("DURATION", "DURATION can't be NULL");
				}
				_dURATION = value;
			}
		}


		public SqlString STATUS
		{
			get
			{
				return _sTATUS;
			}
			set
			{
				SqlString sTATUSTmp = (SqlString)value;
				if(sTATUSTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("STATUS", "STATUS can't be NULL");
				}
				_sTATUS = value;
			}
		}


		public SqlString ERROR_CODE
		{
			get
			{
				return _eRROR_CODE;
			}
			set
			{
				SqlString eRROR_CODETmp = (SqlString)value;
				if(eRROR_CODETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ERROR_CODE", "ERROR_CODE can't be NULL");
				}
				_eRROR_CODE = value;
			}
		}


		public SqlString ERROR_DESC
		{
			get
			{
				return _eRROR_DESC;
			}
			set
			{
				SqlString eRROR_DESCTmp = (SqlString)value;
				if(eRROR_DESCTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ERROR_DESC", "ERROR_DESC can't be NULL");
				}
				_eRROR_DESC = value;
			}
		}


		public SqlDateTime DATETIME_RESPOND
		{
			get
			{
				return _dATETIME_RESPOND;
			}
			set
			{
				SqlDateTime dATETIME_RESPONDTmp = (SqlDateTime)value;
				if(dATETIME_RESPONDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("DATETIME_RESPOND", "DATETIME_RESPOND can't be NULL");
				}
				_dATETIME_RESPOND = value;
			}
		}


		public SqlDecimal RINGTIME
		{
			get
			{
				return _rINGTIME;
			}
			set
			{
				SqlDecimal rINGTIMETmp = (SqlDecimal)value;
				if(rINGTIMETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("RINGTIME", "RINGTIME can't be NULL");
				}
				_rINGTIME = value;
			}
		}
		#endregion
	}
}
