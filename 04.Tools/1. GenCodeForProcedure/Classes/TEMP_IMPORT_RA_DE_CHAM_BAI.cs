///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'TEMP_IMPORT_RA_DE_CHAM_BAI'
// Generated by LLBLGen v1.21.2003.712 Final on: Saturday, May 09, 2015, 15:15:28
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace TRMLLBL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'TEMP_IMPORT_RA_DE_CHAM_BAI'.
	/// </summary>
	public class TEMP_IMPORT_RA_DE_CHAM_BAI : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDecimal		_sL_BAI_CUOI_KY, _sL_RA_DE, _iD;
			private SqlString		_eMAIL_GV_TOPICA, _tEN_COURSE;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public TEMP_IMPORT_RA_DE_CHAM_BAI()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>TEN_COURSE</LI>
		///		 <LI>EMAIL_GV_TOPICA</LI>
		///		 <LI>SL_RA_DE</LI>
		///		 <LI>SL_BAI_CUOI_KY</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_TEMP_IMPORT_RA_DE_CHAM_BAI_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@TEN_COURSE", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _tEN_COURSE));
				cmdToExecute.Parameters.Add(new SqlParameter("@EMAIL_GV_TOPICA", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _eMAIL_GV_TOPICA));
				cmdToExecute.Parameters.Add(new SqlParameter("@SL_RA_DE", SqlDbType.Decimal, 5, ParameterDirection.Input, false, 4, 1, "", DataRowVersion.Proposed, _sL_RA_DE));
				cmdToExecute.Parameters.Add(new SqlParameter("@SL_BAI_CUOI_KY", SqlDbType.Decimal, 5, ParameterDirection.Input, false, 4, 1, "", DataRowVersion.Proposed, _sL_BAI_CUOI_KY));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Output, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_iD = (Decimal)cmdToExecute.Parameters["@ID"].Value;
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TEMP_IMPORT_RA_DE_CHAM_BAI::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		///		 <LI>TEN_COURSE</LI>
		///		 <LI>EMAIL_GV_TOPICA</LI>
		///		 <LI>SL_RA_DE</LI>
		///		 <LI>SL_BAI_CUOI_KY</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_TEMP_IMPORT_RA_DE_CHAM_BAI_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));
				cmdToExecute.Parameters.Add(new SqlParameter("@TEN_COURSE", SqlDbType.NVarChar, 250, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _tEN_COURSE));
				cmdToExecute.Parameters.Add(new SqlParameter("@EMAIL_GV_TOPICA", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _eMAIL_GV_TOPICA));
				cmdToExecute.Parameters.Add(new SqlParameter("@SL_RA_DE", SqlDbType.Decimal, 5, ParameterDirection.Input, false, 4, 1, "", DataRowVersion.Proposed, _sL_RA_DE));
				cmdToExecute.Parameters.Add(new SqlParameter("@SL_BAI_CUOI_KY", SqlDbType.Decimal, 5, ParameterDirection.Input, false, 4, 1, "", DataRowVersion.Proposed, _sL_BAI_CUOI_KY));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TEMP_IMPORT_RA_DE_CHAM_BAI::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_TEMP_IMPORT_RA_DE_CHAM_BAI_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("TEMP_IMPORT_RA_DE_CHAM_BAI::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlDecimal ID
		{
			get
			{
				return _iD;
			}
			set
			{
				SqlDecimal iDTmp = (SqlDecimal)value;
				if(iDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID", "ID can't be NULL");
				}
				_iD = value;
			}
		}


		public SqlString TEN_COURSE
		{
			get
			{
				return _tEN_COURSE;
			}
			set
			{
				SqlString tEN_COURSETmp = (SqlString)value;
				if(tEN_COURSETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("TEN_COURSE", "TEN_COURSE can't be NULL");
				}
				_tEN_COURSE = value;
			}
		}


		public SqlString EMAIL_GV_TOPICA
		{
			get
			{
				return _eMAIL_GV_TOPICA;
			}
			set
			{
				SqlString eMAIL_GV_TOPICATmp = (SqlString)value;
				if(eMAIL_GV_TOPICATmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("EMAIL_GV_TOPICA", "EMAIL_GV_TOPICA can't be NULL");
				}
				_eMAIL_GV_TOPICA = value;
			}
		}


		public SqlDecimal SL_RA_DE
		{
			get
			{
				return _sL_RA_DE;
			}
			set
			{
				SqlDecimal sL_RA_DETmp = (SqlDecimal)value;
				if(sL_RA_DETmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("SL_RA_DE", "SL_RA_DE can't be NULL");
				}
				_sL_RA_DE = value;
			}
		}


		public SqlDecimal SL_BAI_CUOI_KY
		{
			get
			{
				return _sL_BAI_CUOI_KY;
			}
			set
			{
				SqlDecimal sL_BAI_CUOI_KYTmp = (SqlDecimal)value;
				if(sL_BAI_CUOI_KYTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("SL_BAI_CUOI_KY", "SL_BAI_CUOI_KY can't be NULL");
				}
				_sL_BAI_CUOI_KY = value;
			}
		}
		#endregion
	}
}
