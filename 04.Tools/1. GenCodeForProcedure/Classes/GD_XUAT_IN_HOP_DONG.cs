///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'GD_XUAT_IN_HOP_DONG'
// Generated by LLBLGen v1.21.2003.712 Final on: Friday, May 01, 2015, 09:47:34
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace TRMLLBL
{
	/// <summary>
	/// Purpose: Data Access class for the table 'GD_XUAT_IN_HOP_DONG'.
	/// </summary>
	public class GD_XUAT_IN_HOP_DONG : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlDateTime		_tHOI_GIAN_XUAT;
			private SqlDecimal		_sO_LUONG_IN, _iD_MAU_HOP_DONG, _iD_MAU_HOP_DONGOld, _iD_NGUOI_XUAT, _iD_NGUOI_XUATOld, _iD_GIANG_VIEN, _iD_GIANG_VIENOld, _iD_DV_QUAN_LY, _iD_DV_QUAN_LYOld, _iD, _iD_HINH_THUC_HD, _iD_HINH_THUC_HDOld, _iD_DV_THANH_TOAN;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public GD_XUAT_IN_HOP_DONG()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_DV_QUAN_LY</LI>
		///		 <LI>ID_DV_THANH_TOAN</LI>
		///		 <LI>ID_HINH_THUC_HD</LI>
		///		 <LI>ID_GIANG_VIEN</LI>
		///		 <LI>SO_LUONG_IN</LI>
		///		 <LI>THOI_GIAN_XUAT</LI>
		///		 <LI>ID_NGUOI_XUAT</LI>
		///		 <LI>ID_MAU_HOP_DONG</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_XUAT_IN_HOP_DONG_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DV_QUAN_LY", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DV_QUAN_LY));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DV_THANH_TOAN", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DV_THANH_TOAN));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_HINH_THUC_HD", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_HINH_THUC_HD));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_GIANG_VIEN", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_GIANG_VIEN));
				cmdToExecute.Parameters.Add(new SqlParameter("@SO_LUONG_IN", SqlDbType.Decimal, 5, ParameterDirection.Input, false, 4, 1, "", DataRowVersion.Proposed, _sO_LUONG_IN));
				cmdToExecute.Parameters.Add(new SqlParameter("@THOI_GIAN_XUAT", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _tHOI_GIAN_XUAT));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_XUAT", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_XUAT));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_MAU_HOP_DONG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_MAU_HOP_DONG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Output, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_iD = (Decimal)cmdToExecute.Parameters["@ID"].Value;
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_XUAT_IN_HOP_DONG::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		///		 <LI>ID_DV_QUAN_LY</LI>
		///		 <LI>ID_DV_THANH_TOAN</LI>
		///		 <LI>ID_HINH_THUC_HD</LI>
		///		 <LI>ID_GIANG_VIEN</LI>
		///		 <LI>SO_LUONG_IN</LI>
		///		 <LI>THOI_GIAN_XUAT</LI>
		///		 <LI>ID_NGUOI_XUAT</LI>
		///		 <LI>ID_MAU_HOP_DONG</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_XUAT_IN_HOP_DONG_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DV_QUAN_LY", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DV_QUAN_LY));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DV_THANH_TOAN", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DV_THANH_TOAN));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_HINH_THUC_HD", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_HINH_THUC_HD));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_GIANG_VIEN", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_GIANG_VIEN));
				cmdToExecute.Parameters.Add(new SqlParameter("@SO_LUONG_IN", SqlDbType.Decimal, 5, ParameterDirection.Input, false, 4, 1, "", DataRowVersion.Proposed, _sO_LUONG_IN));
				cmdToExecute.Parameters.Add(new SqlParameter("@THOI_GIAN_XUAT", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _tHOI_GIAN_XUAT));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_XUAT", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_XUAT));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_MAU_HOP_DONG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_MAU_HOP_DONG));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_XUAT_IN_HOP_DONG::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'ID_DV_QUAN_LY.
		/// This method will Update one or more existing rows in the database. It will reset the field 'ID_DV_QUAN_LY' in
		/// all rows which have as value for this field the value as set in property 'ID_DV_QUAN_LYOld' to 
		/// the value as set in property 'ID_DV_QUAN_LY'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_DV_QUAN_LY</LI>
		///		 <LI>ID_DV_QUAN_LYOld</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWID_DV_QUAN_LYLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_XUAT_IN_HOP_DONG_UpdateAllWID_DV_QUAN_LYLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DV_QUAN_LY", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DV_QUAN_LY));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DV_QUAN_LYOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DV_QUAN_LYOld));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_XUAT_IN_HOP_DONG::UpdateAllWID_DV_QUAN_LYLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'ID_HINH_THUC_HD.
		/// This method will Update one or more existing rows in the database. It will reset the field 'ID_HINH_THUC_HD' in
		/// all rows which have as value for this field the value as set in property 'ID_HINH_THUC_HDOld' to 
		/// the value as set in property 'ID_HINH_THUC_HD'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_HINH_THUC_HD</LI>
		///		 <LI>ID_HINH_THUC_HDOld</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWID_HINH_THUC_HDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_XUAT_IN_HOP_DONG_UpdateAllWID_HINH_THUC_HDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_HINH_THUC_HD", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_HINH_THUC_HD));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_HINH_THUC_HDOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_HINH_THUC_HDOld));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_XUAT_IN_HOP_DONG::UpdateAllWID_HINH_THUC_HDLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'ID_GIANG_VIEN.
		/// This method will Update one or more existing rows in the database. It will reset the field 'ID_GIANG_VIEN' in
		/// all rows which have as value for this field the value as set in property 'ID_GIANG_VIENOld' to 
		/// the value as set in property 'ID_GIANG_VIEN'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_GIANG_VIEN</LI>
		///		 <LI>ID_GIANG_VIENOld</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWID_GIANG_VIENLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_XUAT_IN_HOP_DONG_UpdateAllWID_GIANG_VIENLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_GIANG_VIEN", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_GIANG_VIEN));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_GIANG_VIENOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_GIANG_VIENOld));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_XUAT_IN_HOP_DONG::UpdateAllWID_GIANG_VIENLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'ID_NGUOI_XUAT.
		/// This method will Update one or more existing rows in the database. It will reset the field 'ID_NGUOI_XUAT' in
		/// all rows which have as value for this field the value as set in property 'ID_NGUOI_XUATOld' to 
		/// the value as set in property 'ID_NGUOI_XUAT'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_NGUOI_XUAT</LI>
		///		 <LI>ID_NGUOI_XUATOld</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWID_NGUOI_XUATLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_XUAT_IN_HOP_DONG_UpdateAllWID_NGUOI_XUATLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_XUAT", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_XUAT));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_XUATOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_XUATOld));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_XUAT_IN_HOP_DONG::UpdateAllWID_NGUOI_XUATLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'ID_MAU_HOP_DONG.
		/// This method will Update one or more existing rows in the database. It will reset the field 'ID_MAU_HOP_DONG' in
		/// all rows which have as value for this field the value as set in property 'ID_MAU_HOP_DONGOld' to 
		/// the value as set in property 'ID_MAU_HOP_DONG'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_MAU_HOP_DONG</LI>
		///		 <LI>ID_MAU_HOP_DONGOld</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWID_MAU_HOP_DONGLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_XUAT_IN_HOP_DONG_UpdateAllWID_MAU_HOP_DONGLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_MAU_HOP_DONG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_MAU_HOP_DONG));
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_MAU_HOP_DONGOld", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_MAU_HOP_DONGOld));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_XUAT_IN_HOP_DONG::UpdateAllWID_MAU_HOP_DONGLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_XUAT_IN_HOP_DONG_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_XUAT_IN_HOP_DONG::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'ID_DV_QUAN_LY'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_DV_QUAN_LY</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWID_DV_QUAN_LYLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_XUAT_IN_HOP_DONG_DeleteAllWID_DV_QUAN_LYLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_DV_QUAN_LY", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_DV_QUAN_LY));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_XUAT_IN_HOP_DONG::DeleteAllWID_DV_QUAN_LYLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'ID_HINH_THUC_HD'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_HINH_THUC_HD</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWID_HINH_THUC_HDLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_XUAT_IN_HOP_DONG_DeleteAllWID_HINH_THUC_HDLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_HINH_THUC_HD", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_HINH_THUC_HD));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_XUAT_IN_HOP_DONG::DeleteAllWID_HINH_THUC_HDLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'ID_GIANG_VIEN'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_GIANG_VIEN</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWID_GIANG_VIENLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_XUAT_IN_HOP_DONG_DeleteAllWID_GIANG_VIENLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_GIANG_VIEN", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_GIANG_VIEN));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_XUAT_IN_HOP_DONG::DeleteAllWID_GIANG_VIENLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'ID_NGUOI_XUAT'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_NGUOI_XUAT</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWID_NGUOI_XUATLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_XUAT_IN_HOP_DONG_DeleteAllWID_NGUOI_XUATLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_NGUOI_XUAT", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_NGUOI_XUAT));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_XUAT_IN_HOP_DONG::DeleteAllWID_NGUOI_XUATLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'ID_MAU_HOP_DONG'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID_MAU_HOP_DONG</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWID_MAU_HOP_DONGLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_XUAT_IN_HOP_DONG_DeleteAllWID_MAU_HOP_DONGLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID_MAU_HOP_DONG", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD_MAU_HOP_DONG));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_XUAT_IN_HOP_DONG::DeleteAllWID_MAU_HOP_DONGLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>ID</LI>
		/// </UL>
		///		 <LI>ID</LI>
		///		 <LI>ID_DV_QUAN_LY</LI>
		///		 <LI>ID_DV_THANH_TOAN</LI>
		///		 <LI>ID_HINH_THUC_HD</LI>
		///		 <LI>ID_GIANG_VIEN</LI>
		///		 <LI>SO_LUONG_IN</LI>
		///		 <LI>THOI_GIAN_XUAT</LI>
		///		 <LI>ID_NGUOI_XUAT</LI>
		///		 <LI>ID_MAU_HOP_DONG</LI>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[pr_GD_XUAT_IN_HOP_DONG_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("GD_XUAT_IN_HOP_DONG");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ID", SqlDbType.Decimal, 9, ParameterDirection.Input, false, 18, 1, "", DataRowVersion.Proposed, _iD));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				if(toReturn.Rows.Count > 0)
				{
					_iD = (Decimal)toReturn.Rows[0]["ID"];
					_iD_DV_QUAN_LY = (Decimal)toReturn.Rows[0]["ID_DV_QUAN_LY"];
					_iD_DV_THANH_TOAN = (Decimal)toReturn.Rows[0]["ID_DV_THANH_TOAN"];
					_iD_HINH_THUC_HD = (Decimal)toReturn.Rows[0]["ID_HINH_THUC_HD"];
					_iD_GIANG_VIEN = (Decimal)toReturn.Rows[0]["ID_GIANG_VIEN"];
					_sO_LUONG_IN = (Decimal)toReturn.Rows[0]["SO_LUONG_IN"];
					_tHOI_GIAN_XUAT = (DateTime)toReturn.Rows[0]["THOI_GIAN_XUAT"];
					_iD_NGUOI_XUAT = (Decimal)toReturn.Rows[0]["ID_NGUOI_XUAT"];
					_iD_MAU_HOP_DONG = (Decimal)toReturn.Rows[0]["ID_MAU_HOP_DONG"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GD_XUAT_IN_HOP_DONG::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlDecimal ID
		{
			get
			{
				return _iD;
			}
			set
			{
				SqlDecimal iDTmp = (SqlDecimal)value;
				if(iDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID", "ID can't be NULL");
				}
				_iD = value;
			}
		}


		public SqlDecimal ID_DV_QUAN_LY
		{
			get
			{
				return _iD_DV_QUAN_LY;
			}
			set
			{
				SqlDecimal iD_DV_QUAN_LYTmp = (SqlDecimal)value;
				if(iD_DV_QUAN_LYTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_DV_QUAN_LY", "ID_DV_QUAN_LY can't be NULL");
				}
				_iD_DV_QUAN_LY = value;
			}
		}
		public SqlDecimal ID_DV_QUAN_LYOld
		{
			get
			{
				return _iD_DV_QUAN_LYOld;
			}
			set
			{
				SqlDecimal iD_DV_QUAN_LYOldTmp = (SqlDecimal)value;
				if(iD_DV_QUAN_LYOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_DV_QUAN_LYOld", "ID_DV_QUAN_LYOld can't be NULL");
				}
				_iD_DV_QUAN_LYOld = value;
			}
		}


		public SqlDecimal ID_DV_THANH_TOAN
		{
			get
			{
				return _iD_DV_THANH_TOAN;
			}
			set
			{
				SqlDecimal iD_DV_THANH_TOANTmp = (SqlDecimal)value;
				if(iD_DV_THANH_TOANTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_DV_THANH_TOAN", "ID_DV_THANH_TOAN can't be NULL");
				}
				_iD_DV_THANH_TOAN = value;
			}
		}


		public SqlDecimal ID_HINH_THUC_HD
		{
			get
			{
				return _iD_HINH_THUC_HD;
			}
			set
			{
				SqlDecimal iD_HINH_THUC_HDTmp = (SqlDecimal)value;
				if(iD_HINH_THUC_HDTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_HINH_THUC_HD", "ID_HINH_THUC_HD can't be NULL");
				}
				_iD_HINH_THUC_HD = value;
			}
		}
		public SqlDecimal ID_HINH_THUC_HDOld
		{
			get
			{
				return _iD_HINH_THUC_HDOld;
			}
			set
			{
				SqlDecimal iD_HINH_THUC_HDOldTmp = (SqlDecimal)value;
				if(iD_HINH_THUC_HDOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_HINH_THUC_HDOld", "ID_HINH_THUC_HDOld can't be NULL");
				}
				_iD_HINH_THUC_HDOld = value;
			}
		}


		public SqlDecimal ID_GIANG_VIEN
		{
			get
			{
				return _iD_GIANG_VIEN;
			}
			set
			{
				SqlDecimal iD_GIANG_VIENTmp = (SqlDecimal)value;
				if(iD_GIANG_VIENTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_GIANG_VIEN", "ID_GIANG_VIEN can't be NULL");
				}
				_iD_GIANG_VIEN = value;
			}
		}
		public SqlDecimal ID_GIANG_VIENOld
		{
			get
			{
				return _iD_GIANG_VIENOld;
			}
			set
			{
				SqlDecimal iD_GIANG_VIENOldTmp = (SqlDecimal)value;
				if(iD_GIANG_VIENOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_GIANG_VIENOld", "ID_GIANG_VIENOld can't be NULL");
				}
				_iD_GIANG_VIENOld = value;
			}
		}


		public SqlDecimal SO_LUONG_IN
		{
			get
			{
				return _sO_LUONG_IN;
			}
			set
			{
				SqlDecimal sO_LUONG_INTmp = (SqlDecimal)value;
				if(sO_LUONG_INTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("SO_LUONG_IN", "SO_LUONG_IN can't be NULL");
				}
				_sO_LUONG_IN = value;
			}
		}


		public SqlDateTime THOI_GIAN_XUAT
		{
			get
			{
				return _tHOI_GIAN_XUAT;
			}
			set
			{
				SqlDateTime tHOI_GIAN_XUATTmp = (SqlDateTime)value;
				if(tHOI_GIAN_XUATTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("THOI_GIAN_XUAT", "THOI_GIAN_XUAT can't be NULL");
				}
				_tHOI_GIAN_XUAT = value;
			}
		}


		public SqlDecimal ID_NGUOI_XUAT
		{
			get
			{
				return _iD_NGUOI_XUAT;
			}
			set
			{
				SqlDecimal iD_NGUOI_XUATTmp = (SqlDecimal)value;
				if(iD_NGUOI_XUATTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_NGUOI_XUAT", "ID_NGUOI_XUAT can't be NULL");
				}
				_iD_NGUOI_XUAT = value;
			}
		}
		public SqlDecimal ID_NGUOI_XUATOld
		{
			get
			{
				return _iD_NGUOI_XUATOld;
			}
			set
			{
				SqlDecimal iD_NGUOI_XUATOldTmp = (SqlDecimal)value;
				if(iD_NGUOI_XUATOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_NGUOI_XUATOld", "ID_NGUOI_XUATOld can't be NULL");
				}
				_iD_NGUOI_XUATOld = value;
			}
		}


		public SqlDecimal ID_MAU_HOP_DONG
		{
			get
			{
				return _iD_MAU_HOP_DONG;
			}
			set
			{
				SqlDecimal iD_MAU_HOP_DONGTmp = (SqlDecimal)value;
				if(iD_MAU_HOP_DONGTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_MAU_HOP_DONG", "ID_MAU_HOP_DONG can't be NULL");
				}
				_iD_MAU_HOP_DONG = value;
			}
		}
		public SqlDecimal ID_MAU_HOP_DONGOld
		{
			get
			{
				return _iD_MAU_HOP_DONGOld;
			}
			set
			{
				SqlDecimal iD_MAU_HOP_DONGOldTmp = (SqlDecimal)value;
				if(iD_MAU_HOP_DONGOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("ID_MAU_HOP_DONGOld", "ID_MAU_HOP_DONGOld can't be NULL");
				}
				_iD_MAU_HOP_DONGOld = value;
			}
		}
		#endregion
	}
}
